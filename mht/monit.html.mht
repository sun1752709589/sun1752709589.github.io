From: <Saved by Mozilla 5.0 (Macintosh)>
Subject: Unknown
Date: Wed, 09 Aug 2017 14:17:16 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_C9F824A9.17EEC012"
X-MAF-Information: Produced By MAF V4.1.3

This is a multi-part message in MIME format.

------=_NextPart_000_0000_C9F824A9.17EEC012
Content-Type: text/html;
	charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://mmonit.com/monit/documentation/monit.html

<!--?xml version=3D"1.0" ?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0=
 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmln=
s=3D"http://www.w3.org/1999/xhtml"><head>
<meta http-equiv=3D"content-type" content=3D"text/html; charset=3DUTF-8">
<title></title>
<link rel=3D"stylesheet" href=3D"urn:snapshot-CA8B86AC:https://mmonit.com/m=
onit/documentation/monit.css" type=3D"text/css">
<meta http-equiv=3D"content-type" content=3D"text/html; charset=3DUTF-8">
<link rev=3D"made" href=3D"mailto:_netbios@osx320.apple.com">
</head>

<body>

<h2>Monit Version 5.23.0</h2>


<ul id=3D"index">
  <li><a href=3D"#NAME">NAME</a></li>
  <li><a href=3D"#SYNOPSIS">SYNOPSIS</a></li>
  <li><a href=3D"#DESCRIPTION">DESCRIPTION</a></li>
  <li><a href=3D"#WHAT-TO-MONITOR">WHAT TO MONITOR?</a></li>
  <li><a href=3D"#GENERAL-OPERATION">GENERAL OPERATION</a>
    <ul>
      <li><a href=3D"#Options">Options</a></li>
      <li><a href=3D"#Arguments">Arguments</a></li>
    </ul>
  </li>
  <li><a href=3D"#THE-MONIT-CONTROL-FILE">THE MONIT CONTROL FILE</a>
    <ul>
      <li><a href=3D"#Service-checks">Service checks</a>
        <ul>
          <li><a href=3D"#Process">Process</a></li>
          <li><a href=3D"#File">File</a></li>
          <li><a href=3D"#Fifo">Fifo</a></li>
          <li><a href=3D"#Filesystem">Filesystem</a></li>
          <li><a href=3D"#Directory">Directory</a></li>
          <li><a href=3D"#Remote-host">Remote host</a></li>
          <li><a href=3D"#System">System</a></li>
          <li><a href=3D"#Program">Program</a></li>
          <li><a href=3D"#Network">Network</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href=3D"#LOGGING">LOGGING</a></li>
  <li><a href=3D"#TERMINAL-OUTPUT">TERMINAL OUTPUT</a></li>
  <li><a href=3D"#DAEMON-MODE">DAEMON MODE</a></li>
  <li><a href=3D"#INIT-SUPPORT">INIT SUPPORT</a></li>
  <li><a href=3D"#INCLUDE-FILES">INCLUDE FILES</a></li>
  <li><a href=3D"#SSL-OPTIONS">SSL OPTIONS</a></li>
  <li><a href=3D"#FIPS-MODE">FIPS MODE</a></li>
  <li><a href=3D"#MONIT-HTTPD">MONIT HTTPD</a>
    <ul>
      <li><a href=3D"#UNIX-SOCKET">UNIX SOCKET</a></li>
      <li><a href=3D"#TCP-PORT">TCP PORT</a>
        <ul>
          <li><a href=3D"#SSL-settings">SSL settings</a></li>
        </ul>
      </li>
      <li><a href=3D"#Monit-version-signature">Monit version signature</a><=
/li>
      <li><a href=3D"#Authentication">Authentication</a>
        <ul>
          <li><a href=3D"#Client-certificates">Client certificates</a></li>
          <li><a href=3D"#Basic-Authentication">Basic Authentication</a>
            <ul>
              <li><a href=3D"#Cleartext-user-and-password">Cleartext user=
 and password</a></li>
            </ul>
          </li>
          <li><a href=3D"#Host-and-network-allow-list">Host and network all=
ow list</a>
            <ul>
              <li><a href=3D"#PAM">PAM</a></li>
              <li><a href=3D"#htpasswd-file">htpasswd file</a></li>
              <li><a href=3D"#Read-only-users">Read-only users</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href=3D"#ALERT-MESSAGES">ALERT MESSAGES</a>
    <ul>
      <li><a href=3D"#Setting-an-alert-recipient">Setting an alert recipien=
t</a>
        <ul>
          <li><a href=3D"#Setting-an-event-filter">Setting an event filter<=
/a></li>
          <li><a href=3D"#Setting-an-error-reminder">Setting an error remin=
der</a></li>
        </ul>
      </li>
      <li><a href=3D"#Disabling-alerts-for-some-service">Disabling alerts=
 for some service</a></li>
      <li><a href=3D"#Message-format">Message format</a></li>
      <li><a href=3D"#Setting-a-mail-server-for-alert-delivery">Setting a=
 mail server for alert delivery</a></li>
      <li><a href=3D"#Event-queue">Event queue</a></li>
    </ul>
  </li>
  <li><a href=3D"#SERVICE-METHODS">SERVICE METHODS</a></li>
  <li><a href=3D"#SERVICE-POLL-TIME">SERVICE POLL TIME</a></li>
  <li><a href=3D"#SERVICE-GROUPS">SERVICE GROUPS</a></li>
  <li><a href=3D"#SERVICE-MONITORING-MODE">SERVICE MONITORING MODE</a></li>
  <li><a href=3D"#SYSTEM-REBOOT-AND-SERVICE-STARTUP">SYSTEM REBOOT AND SERV=
ICE STARTUP</a></li>
  <li><a href=3D"#SERVICE-RESTART-LIMIT">SERVICE RESTART LIMIT</a></li>
  <li><a href=3D"#SERVICE-DEPENDENCIES">SERVICE DEPENDENCIES</a></li>
  <li><a href=3D"#SERVICE-TESTS">SERVICE TESTS</a>
    <ul>
      <li>
        <ul>
          <li><a href=3D"#LIMITS">LIMITS</a></li>
          <li><a href=3D"#GENERAL-SYNTAX">GENERAL SYNTAX</a></li>
          <li><a href=3D"#ACTION">ACTION</a></li>
          <li><a href=3D"#FAULT-TOLERANCE">FAULT TOLERANCE</a></li>
        </ul>
      </li>
      <li><a href=3D"#EXISTENCE-TESTS">EXISTENCE TESTS</a>
        <ul>
          <li><a href=3D"#NON-EXIST">NON-EXIST</a></li>
          <li><a href=3D"#EXIST">EXIST</a></li>
        </ul>
      </li>
      <li><a href=3D"#RESOURCE-TESTS">RESOURCE TESTS</a>
        <ul>
          <li><a href=3D"#System-resource-tests">System resource tests</a><=
/li>
          <li><a href=3D"#Process-resource-tests">Process resource tests</a=
></li>
        </ul>
      </li>
      <li><a href=3D"#PROCESS-DISK-I-O-TEST">PROCESS DISK I/O TEST</a>
        <ul>
          <li><a href=3D"#Read:-bytes-per-second">Read: bytes per second</a=
></li>
          <li><a href=3D"#Read:-operations-per-second">Read: operations per=
 second</a></li>
          <li><a href=3D"#Write:-bytes-per-second">Write: bytes per second<=
/a></li>
          <li><a href=3D"#Write:-operations-per-second">Write: operations=
 per second</a></li>
        </ul>
      </li>
      <li><a href=3D"#FILE-CHECKSUM-TEST">FILE CHECKSUM TEST</a></li>
      <li><a href=3D"#TIMESTAMP-TEST">TIMESTAMP TEST</a></li>
      <li><a href=3D"#FILE-SIZE-TEST">FILE SIZE TEST</a></li>
      <li><a href=3D"#FILE-CONTENT-TEST">FILE CONTENT TEST</a></li>
      <li><a href=3D"#FILESYSTEM-MOUNT-FLAGS-TEST">FILESYSTEM MOUNT FLAGS=
 TEST</a></li>
      <li><a href=3D"#SPACE-USAGE-TEST">SPACE USAGE TEST</a></li>
      <li><a href=3D"#INODE-USAGE-TEST">INODE USAGE TEST</a></li>
      <li><a href=3D"#DISK-I-O-TEST">DISK I/O TEST</a>
        <ul>
          <li><a href=3D"#Read:-bytes-per-second1">Read: bytes per second</=
a></li>
          <li><a href=3D"#Read:-operations-per-second1">Read: operations pe=
r second</a></li>
          <li><a href=3D"#Write:-bytes-per-second1">Write: bytes per second=
</a></li>
          <li><a href=3D"#Write:-operations-per-second1">Write: operations=
 per second</a></li>
          <li><a href=3D"#Service-time-per-operation">Service time per oper=
ation</a></li>
        </ul>
      </li>
      <li><a href=3D"#PERMISSION-TEST">PERMISSION TEST</a></li>
      <li><a href=3D"#UID-TEST">UID TEST</a></li>
      <li><a href=3D"#GID-TEST">GID TEST</a></li>
      <li><a href=3D"#PID-TEST">PID TEST</a></li>
      <li><a href=3D"#PPID-TEST">PPID TEST</a></li>
      <li><a href=3D"#UPTIME-TEST">UPTIME TEST</a></li>
      <li><a href=3D"#PROGRAM-STATUS-TEST">PROGRAM STATUS TEST</a></li>
      <li><a href=3D"#NETWORK-LINK-STATUS-TEST">NETWORK LINK STATUS TEST</a=
></li>
      <li><a href=3D"#NETWORK-LINK-CAPACITY-TEST">NETWORK LINK CAPACITY TES=
T</a></li>
      <li><a href=3D"#NETWORK-SATURATION-TEST">NETWORK SATURATION TEST</a><=
/li>
      <li><a href=3D"#NETWORK-BANDWIDTH-TEST">NETWORK BANDWIDTH TEST</a></l=
i>
      <li><a href=3D"#NETWORK-PACKETS-TEST">NETWORK PACKETS TEST</a></li>
      <li><a href=3D"#NETWORK-PING-TEST">NETWORK PING TEST</a></li>
      <li><a href=3D"#CONNECTION-TESTS">CONNECTION TESTS</a>
        <ul>
          <li><a href=3D"#Specific-protocol-test-options">Specific protocol=
 test options</a>
            <ul>
              <li><a href=3D"#GENERIC-SEND-EXPECT">GENERIC (SEND/EXPECT)</a=
></li>
              <li><a href=3D"#HTTP">HTTP</a></li>
              <li><a href=3D"#APACHE-STATUS">APACHE-STATUS</a></li>
              <li><a href=3D"#MYSQL">MYSQL</a></li>
              <li><a href=3D"#RADIUS">RADIUS</a></li>
              <li><a href=3D"#SIP">SIP</a></li>
              <li><a href=3D"#SMTP">SMTP</a></li>
              <li><a href=3D"#WEBSOCKET">WEBSOCKET</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href=3D"#MANAGE-YOUR-MONIT-INSTANCES">MANAGE YOUR MONIT INSTANCES<=
/a></li>
  <li><a href=3D"#CONFIGURATION-EXAMPLES">CONFIGURATION EXAMPLES</a></li>
  <li><a href=3D"#FILES">FILES</a></li>
  <li><a href=3D"#ENVIRONMENT">ENVIRONMENT</a></li>
  <li><a href=3D"#SIGNALS">SIGNALS</a></li>
  <li><a href=3D"#NOTES">NOTES</a></li>
  <li><a href=3D"#COPYRIGHT">COPYRIGHT</a></li>
  <li><a href=3D"#SEE-ALSO">SEE ALSO</a></li>
</ul>

<h1 id=3D"NAME">NAME</h1>

<p>Monit - utility for monitoring services on a Unix system</p>

<h1 id=3D"SYNOPSIS">SYNOPSIS</h1>

<p><b>monit</b> [options] &lt;arguments&gt;</p>

<h1 id=3D"DESCRIPTION">DESCRIPTION</h1>

<p><b>Monit</b> is a utility for managing and monitoring processes, program=
s, files, directories and filesystems on a Unix system. Monit conducts auto=
matic maintenance and repair and can execute meaningful causal actions in=
 error situations. E.g. Monit can start a process if it does not run, resta=
rt a process if it does not respond and stop a process if it uses too much=
 resources. You can use Monit to monitor files, directories and filesystems=
 for changes, such as timestamps changes, checksum changes or size changes.=
</p>

<p>Monit is controlled via an easy to configure control file based on a fre=
e-format, token-oriented syntax. Monit logs to syslog or to its own log fil=
e and notifies you about error conditions via customisable alert messages.=
 Monit can perform various TCP/IP network checks, protocol checks and can=
 utilise SSL for such checks. Monit provides a HTTP(S) interface and you ma=
y use a browser to access the Monit program.</p>

<h1 id=3D"WHAT-TO-MONITOR">WHAT TO MONITOR?</h1>

<p>You can use Monit to monitor daemon <b>processes</b> or similar programs=
 running on localhost. Monit is particularly useful for monitoring daemon=
 processes, such as those started at system boot time. For instance sendmai=
l, sshd, apache and mysql. In contrast to many other monitoring systems, Mo=
nit can act if an error situation should occur, e.g.; if sendmail is not ru=
nning, monit can start sendmail again automatically or if apache is using=
 too many resources (e.g. if a DoS attack is in progress) Monit can stop or=
 restart apache and send you an alert message. Monit can also monitor proce=
ss characteristics, such as how much memory or cpu cycles a process is usin=
g.</p>

<p>You can also use Monit to monitor <b>files</b>, <b>directories</b> and=
 <b>filesystems</b> on localhost. Monit can monitor these items for changes=
, such as timestamps changes, checksum changes or size changes. This is als=
o useful for security reasons - you can monitor the md5 or sha1 checksum of=
 files that should not change and get an alert or perform an action if they=
 should change.</p>

<p>Monit can monitor <b>network connections</b> to various servers, either=
 on localhost or on remote hosts. TCP, UDP and Unix Domain Sockets are supp=
orted. Network test can be performed on a protocol level; Monit has built-i=
n tests for the main Internet protocols, such as HTTP, SMTP etc. Even if a=
 protocol is not supported you can still test the server because you can co=
nfigure Monit to send any data and test the response from the server.</p>

<p>Monit can be used to test <b>programs</b> or scripts at certain times,=
 much like cron, but in addition, you can test the exit value of a program=
 and perform an action or send an alert if the exit value indicates an erro=
r. This means that you can use Monit to perform any type of check you can=
 write a script for.</p>

<p>Finally, Monit can be used to monitor general <b>system</b> resources on=
 localhost such as overall CPU usage, Memory and System Load.</p>

<h1 id=3D"GENERAL-OPERATION">GENERAL OPERATION</h1>

<p>The behaviour of Monit is controlled by command-line options <i>and</i>=
 a run control file, <a href=3D"#THE-MONIT-CONTROL-FILE">monitrc</a>, the=
 syntax of which we describe in a later section. Command-line options overr=
ide <i>.monitrc</i> declarations.</p>

<p>The default location for <i>monitrc</i> is <i>~/.monitrc</i>. If this fi=
le does not exist, Monit will try <i>/etc/monitrc</i> and a few other place=
s. See <a href=3D"#FILES">FILES</a> for details. You can also specify the=
 control file directly by using the <i>-c</i> command-line switch to monit.=
 For instance,</p>

<pre><code> $ monit -c /var/monit/monitrc</code></pre>

<p>Before Monit is started the first time, you can test the control file fo=
r syntax errors:</p>

<pre><code> $ monit -t
 $ Control file syntax OK</code></pre>

<p>If there was an error, Monit will print an error message to the console,=
 including the line number in the control file from where the error was fou=
nd.</p>

<p>Once you have a working Monit control file, simply start Monit from the=
 console, like so:</p>

<pre><code> $ monit</code></pre>

<p>You can change some configuration directives via command-line switches,=
 but for simplicity it is recommended that you put these in the control fil=
e.</p>

<p>Monit will detach from the terminal and run as a background process, i.e=
. as a daemon process. As a daemon, Monit runs in cycles; It monitor servic=
es, then goes to sleep for a configured period, then wakes up and start mon=
itoring again in an endless loop.</p>

<h2 id=3D"Options">Options</h2>

<p>The following options are recognized by Monit. However, it is recommende=
d that you set options (when applicable) directly in the <i>.monitrc</i> co=
ntrol file.</p>

<p><b>-c</b> <i>file</i> Use this control file</p>

<p><b>-d</b> <i>n</i> Run Monit as a daemon once per <i>n</i> seconds. Or=
 use <i>"set daemon"</i> in monitrc.</p>

<p><b>-g</b> <i>name</i> Set group name for start, stop, restart, monitor,=
 unmonitor, status and summary action.</p>

<p><b>-l</b> <i>file</i> Print log information to this file. Or use <i>"set=
 log"</i> in monitrc.</p>

<p><b>-p</b> <i>pidfile</i> Use this lock file in daemon mode. Or use <i>"s=
et pidfile"</i> in monitrc.</p>

<p><b>-s</b> <i>statefile</i> Write state information to this file. Or use=
 <i>"set statefile"</i> in monitrc.</p>

<p><b>-B</b> Batch command line mode (no tabular output and no colors). Or=
 use <i>"set terminal batch"</i> in monitrc.</p>

<p><b>-I</b> Do not run in background mode (needed to run from init). Or us=
e <i>"set init"</i> in monitrc.</p>

<p><b>-i</b> Print Monit's unique ID</p>

<p><b>-r</b> Reset Monit's unique ID. Use with caution</p>

<p><b>-t</b> Run syntax check for the control file</p>

<p><b>-v</b> Verbose mode, work noisy (diagnostic output)</p>

<p><b>-vv</b> Very verbose mode, same as -v plus log stack-trace on error</=
p>

<p><b>-H</b> <i>[filename]</i> Print MD5 and SHA1 hashes of the file or of=
 stdin if the filename is omitted; Monit will exit afterwards</p>

<p><b>-V</b> Print version number and patch level</p>

<p><b>-h</b> Print a help text</p>

<h2 id=3D"Arguments">Arguments</h2>

<p>Once you have Monit running as a daemon process, you can call Monit with=
 one of the following arguments. Monit will then connect to the Monit daemo=
n (on TCP port 127.0.0.1:2812 by default) and ask the Monit daemon to perfo=
rm the requested action. In other words; calling monit without arguments st=
arts the Monit daemon, and calling monit <i>with</i> arguments enables you=
 to communicate with the Monit daemon process.</p>

<dl>

<dt id=3D"start-all">start all</dt>
<dd>

<p>Start all services listed in the control file and enable monitoring for=
 them. If the group option is set (<i>-g</i>), only start and enable monito=
ring of services in the named group ("all" is not required in this case).</=
p>

</dd>
<dt id=3D"start-name">start &lt;name&gt;</dt>
<dd>

<p>Start the named service and enable monitoring for it. The name is a serv=
ice entry name from the monitrc file.</p>

</dd>
<dt id=3D"stop-all">stop all</dt>
<dd>

<p>Stop all services listed in the control file and disable their monitorin=
g. If the group option is set, only stop and disable monitoring of the serv=
ices in the named group ("all" is not required in this case).</p>

</dd>
<dt id=3D"stop-name">stop &lt;name&gt;</dt>
<dd>

<p>Stop the named service and disable its monitoring. The name is a service=
 entry name from the monitrc file.</p>

</dd>
<dt id=3D"restart-all">restart all</dt>
<dd>

<p>Stop and start <i>all</i> services. If the group option is set, only res=
tart the services in the named group ("all" is not required in this case).<=
/p>

</dd>
<dt id=3D"restart-name">restart &lt;name&gt;</dt>
<dd>

<p>Restart the named service. The name is a service entry name from the mon=
itrc file.</p>

</dd>
<dt id=3D"monitor-all">monitor all</dt>
<dd>

<p>Enable monitoring of all services listed in the control file. If the gro=
up option is set, only start monitoring of services in the named group ("al=
l" is not required in this case).</p>

</dd>
<dt id=3D"monitor-name">monitor &lt;name&gt;</dt>
<dd>

<p>Enable monitoring of the named service. The name is a service entry name=
 from the monitrc file. Monit will also enable monitoring of all services=
 this service depends on.</p>

</dd>
<dt id=3D"unmonitor-all">unmonitor all</dt>
<dd>

<p>Disable monitoring of all services listed in the control file. If the gr=
oup option is set, only disable monitoring of services in the named group=
 ("all" is not required in this case).</p>

</dd>
<dt id=3D"unmonitor-name">unmonitor &lt;name&gt;</dt>
<dd>

<p>Disable monitoring of the named service. The name is a service entry nam=
e from the monitrc file. Monit will also disable monitoring of all services=
 that depends on this service.</p>

</dd>
<dt id=3D"status-name">status [name]</dt>
<dd>

<p>Print service status information.</p>

</dd>
<dt id=3D"summary-name">summary [name]</dt>
<dd>

<p>Print a short status summary.</p>

</dd>
<dt id=3D"report-up-down-initialising-unmonitored-total">report [up | down=
 | initialising | unmonitored | total]</dt>
<dd>

<p>Report services state. The output can easily be parsed by scripts. Witho=
ut options, prints a short overview of the state of all services managed by=
 Monit. The option, <i>up</i> prints the number of all services in this sta=
te, <i>down</i> likewise and so on.</p>

</dd>
<dt id=3D"reload">reload</dt>
<dd>

<p>Reinitialise a running Monit daemon, the daemon will reread its configur=
ation, close and reopen log files.</p>

</dd>
<dt id=3D"quit">quit</dt>
<dd>

<p>Kill the Monit daemon process</p>

</dd>
<dt id=3D"validate">validate</dt>
<dd>

<p>Check all services listed in the control file. This action is also the=
 default behaviour when Monit runs in daemon mode.</p>

</dd>
<dt id=3D"procmatch-regex">procmatch &lt;regex&gt;</dt>
<dd>

<p>Allows for easy testing of pattern for process match check. The command=
 takes regular expression as an argument and displays all running processes=
 matching the pattern.</p>

</dd>
</dl>

<h1 id=3D"THE-MONIT-CONTROL-FILE">THE MONIT CONTROL FILE</h1>

<p>Monit is configured and controlled via a control file called <i>monitrc<=
/i>. The default location for this file is ~/.monitrc. If this file does no=
t exist, Monit will try /etc/monitrc, then @sysconfdir@/monitrc and finally=
 ./monitrc. If you build Monit from source, the value of @sysconfdir@ can=
 be given at configure time as ./configure --sysconfdir. For instance, usin=
g <i>./configure --sysconfdir /var/monit/etc</i> will make Monit search for=
 <i>monitrc</i> in <i>/var/monit/etc</i></p>

<p>To protect the security of your control file and passwords the control=
 file must have read-write permissions <i>no more than 0700</i> (u=3Dxrw,g=
=3D,o=3D); Monit will complain and exit otherwise.</p>

<p>When there is a conflict between the command-line arguments and the argu=
ments in this file, the command-line arguments takes precedence.</p>

<p>Monit uses its own Domain Specific Language (DSL); The control file cons=
ists of a series of service entries and global option statements.</p>

<p>Comments begin with a <code>'#'</code> and extend through the end of the=
 line. Otherwise the file consists of a series of service entries or global=
 option statements in a free-format, token-oriented syntax.</p>

<p>You can use noise keywords like <code>'if'</code>, <code>'and'</code>,=
 <code>'with(in)'</code>, <code>'has'</code>, <code>'us(ing|e)'</code>, <co=
de>'on(ly)'</code>, <code>'then'</code>, <code>'for'</code>, <code>'of'</co=
de> anywhere in an entry to make it resemble English. They're ignored, but=
 can make entries much easier to read at a glance. Keywords are case insens=
itive.</p>

<p>There are three kinds of tokens: <i>grammar</i>, <i>numbers</i> (i.e. de=
cimal digit sequences) and <i>strings</i>. Strings can be either quoted or=
 unquoted. A quoted string is bounded by double quotes and may contain whit=
espace (and quoted digits are treated as a string). An unquoted string is=
 any whitespace-delimited token, containing characters and/or numbers.</p>

<p>On a semantic level, the control file consists of three types of entries=
:</p>

<dl>

<dt id=3D"Global-set-statements">1. Global set-statements</dt>
<dd>

<p>A global set-statement starts with the keyword <code>set</code> and the=
 item to configure.</p>

</dd>
<dt id=3D"Global-include-statement">2. Global include-statement</dt>
<dd>

<p>The include statement consists of the keyword <code>include</code> and=
 a glob string. This statement is used to include configure directives from=
 separate files.</p>

</dd>
<dt id=3D"One-or-more-service-entry-statements">3. One or more service entr=
y statements.</dt>
<dd>

</dd>
</dl>

<h2 id=3D"Service-checks">Service checks</h2>

<p>Each service entry consists of the keywords <code>check</code>, followed=
 by the service type. Each entry requires a <b>unique</b> descriptive name,=
 which may be freely chosen. This name is used by Monit to refer to the ser=
vice internally and in all interactions with the user.</p>

<p>Currently, nine types of check statements are supported:</p>

<h3 id=3D"Process">Process</h3>

<pre><code>    CHECK PROCESS &lt;unique name&gt; &lt;PIDFILE &lt;path&gt;=
 | MATCHING &lt;regex&gt;&gt;</code></pre>

<p>&lt;path&gt; is the absolute path to the program's pid-file. A pid-file=
 is a file, containing a Process's unique ID. If the pid-file does not exis=
t or does not contain the PID number of a running process, Monit will call=
 the entry's start method if defined.</p>

<p>&lt;regex&gt; is an alternative to using PID files and uses process name=
 pattern matching to find the process to monitor. The top-most matching par=
ent with highest uptime is selected, so this form of check is most useful=
 if the process name is unique. Pid-file should be used where possible as=
 it defines expected PID exactly. You can test if a process match a pattern=
 from the command-line using <code>monit procmatch "regex-pattern"</code>.=
 This will lists all processes matching or not, the regex-pattern.</p>

<h3 id=3D"File">File</h3>

<pre><code>    CHECK FILE &lt;unique name&gt; PATH &lt;path&gt;</code></pre>

<p>&lt;path&gt; is the absolute path to the file. If the file does not exis=
t, Monit will call the entry's start method if defined, if &lt;path&gt; doe=
s not point to a regular file type (for instance a directory), Monit will=
 disable monitoring of this entry. If Monit runs in passive mode or the sta=
rt method is not defined, Monit will just send an alert on error.</p>

<h3 id=3D"Fifo">Fifo</h3>

<pre><code>    CHECK FIFO &lt;unique name&gt; PATH &lt;path&gt;</code></pre>

<p>&lt;path&gt; is the absolute path to the fifo. If the fifo does not exis=
t, Monit will call the entry's start method if defined, if &lt;path&gt; doe=
s not point to a fifo type (for instance a directory), Monit will disable=
 monitoring of this entry. If Monit runs in passive mode or the start metho=
d is not defined, Monit will just send an alert on error.</p>

<h3 id=3D"Filesystem">Filesystem</h3>

<pre><code>    CHECK FILESYSTEM &lt;unique name&gt; PATH &lt;string&gt;</co=
de></pre>

<p>&lt;path&gt; is the path to the device/disk, mount point or NFS/CIFS/FUS=
E connection string. If the filesystem becomes unavailable, Monit will call=
 the service's start method if defined. If Monit runs in passive mode or th=
e start method is not defined, Monit will just send an alert on error.</p>

<h3 id=3D"Directory">Directory</h3>

<pre><code>    CHECK DIRECTORY &lt;unique name&gt; PATH &lt;path&gt;</code>=
</pre>

<p>&lt;path&gt; is the absolute path to the directory. If the directory doe=
s not exist, Monit will call the entry's start method if defined. If &lt;pa=
th&gt; does not point to a directory, monit will disable monitoring of this=
 entry. If Monit runs in passive mode or the start methods is not defined,=
 Monit will just send an alert on error.</p>

<h3 id=3D"Remote-host">Remote host</h3>

<pre><code>    CHECK HOST &lt;unique name&gt; ADDRESS &lt;host&gt;</code></=
pre>

<p>The host address can be specified as a hostname string or as an IP-addre=
ss string on a dotted decimal format. Such as, "tildeslash.com" or "64.87.7=
2.95".</p>

<h3 id=3D"System">System</h3>

<pre><code>    CHECK SYSTEM &lt;unique name&gt;</code></pre>

<p>The <i>unique name</i> is usually the local host name, but any descripti=
ve name can be used. If you use the variable $HOST as the name, it will exp=
and to the hostname. This check allows one to monitor general system resour=
ces such as CPU usage, total memory usage or load average. The <i>unique na=
me</i> is used as the system hostname in mail alerts and as the initial nam=
e of the host entry in M/Monit.</p>

<h3 id=3D"Program">Program</h3>

<pre><code>    CHECK PROGRAM &lt;unique name&gt; PATH &lt;executable file&g=
t; [TIMEOUT &lt;number&gt; SECONDS]</code></pre>

<p>&lt;path&gt; is the absolute path to the executable program or script.=
 The <a href=3D"#PROGRAM-STATUS-TEST">status test</a> allows one to check=
 the program's exit status. If the program does not finish executing within=
 &lt;number&gt; seconds, Monit will terminate it. The default program timeo=
ut is 300 seconds (5 minutes). The output of the program is recorded and ma=
de available in the User Interface and in alerts, by default up to 512 byte=
s. You can change the output limit using the <a href=3D"#LIMITS">set limits=
</a> statement).</p>

<h3 id=3D"Network">Network</h3>

<pre><code>    CHECK NETWORK &lt;unique name&gt; &lt;ADDRESS &lt;ipaddress&=
gt; | INTERFACE &lt;name&gt;&gt;</code></pre>

<p>&lt;ipaddress&gt; is the IPv4 or IPv6 address of the monitored network=
 interface. It is also possible to use interface name, such as "eth0" on Li=
nux.</p>

<h1 id=3D"LOGGING">LOGGING</h1>

<p>Monit will log status and error messages to a file or via syslog. Use th=
e <i>set log</i> statement in the monitrc control file.</p>

<p>To setup Monit to log to its own file, use e.g. <i>set log /var/log/moni=
t.log</i>. Note, the previous <i>set logfile</i> statement is deprecated,=
 but can alternatively be used.</p>

<p>If <b>syslog</b> is given as a value for the <code>-l</code> command-lin=
e switch or the keyword <i>set log syslog</i> is found in the control file,=
 Monit will use the <b>syslog</b> system daemon to log messages with a prio=
rity assigned to each message based on the context.</p>

<p>To turn off logging, simply do not set the log in the control file (and=
 of course, do not use the -l switch)</p>

<p>The format for log file is:</p>

<pre><code>    [date] priority : message</code></pre>

<p>for example:</p>

<pre><code>    [CET Jan  5 18:49:29] info : 'localhost' Monit started</code=
></pre>

<h1 id=3D"TERMINAL-OUTPUT">TERMINAL OUTPUT</h1>

<p>Monit uses ANSI escape sequences to colorise important parts of the comm=
and-line output, if the terminal supports colors, and UTF-8 box characters=
 for tabular output.</p>

<p>If you want to process the monit CLI output in a script, you can use eit=
her the -B option or use the following statement in the monit configuration=
 file to disable tabular output and colors completely:</p>

<pre><code> SET TERMINAL BATCH</code></pre>

<h1 id=3D"DAEMON-MODE">DAEMON MODE</h1>

<p>Use</p>

<pre><code> SET DAEMON &lt;seconds&gt;
     [[WITH] START DELAY &lt;seconds&gt;]</code></pre>

<p>to specify Monit's poll cycle length and run Monit in daemon mode. You=
 must specify a numeric argument which is a polling interval in seconds.</p>

<p>In daemon mode, Monit detaches from the console, puts itself in the back=
ground and runs continuously, monitoring each specified service and then go=
es to sleep for the given poll interval, wakes up and start monitoring agai=
n in an endless cycle.</p>

<p>Alternatively, you can use the <code>-d</code> command line switch to se=
t the poll interval, but it is strongly recommended to set the poll interva=
l in your <i>~/.monitrc</i> file, by using <i>set daemon</i>.</p>

<p>Monit will then always start in daemon mode. If you do not use this stat=
ement and do not start monit with the -d option, Monit will just run throug=
h the service checks once and then exit. This might be useful in some situa=
tions, but Monit is primarily designed to run as a daemon process.</p>

<p>Calling <code>monit</code> with a Monit daemon running in the background=
 sends a wake-up signal to the daemon, forcing it to check services immedia=
tely. Calling <code>monit</code> with the quit argument will kill a running=
 Monit daemon process instead of waking it up.</p>

<p>The start delay option can be used to wait (once) before Monit starts ch=
ecking services. This can be useful for example when the system boots. Moni=
t will by default start checking services immediately at startup.</p>

<h1 id=3D"INIT-SUPPORT">INIT SUPPORT</h1>

<p>The <code>set init</code> statement prevents Monit from transforming its=
elf into a daemon process. Instead Monit will run as a foreground process.=
 (You should still use <code>set daemon</code> to specify the poll cycle).<=
/p>

<p>This is required to run Monit from init. Using init to start Monit is pr=
obably the best way to run Monit if you want to be certain that you always=
 have a running Monit daemon on your system. Another option is to run Monit=
 from crontab. In any case, you should make sure that the control file does=
 not have any syntax errors before you start Monit from init or crontab (us=
e <code>monit -t</code> to check).</p>

<p>To setup Monit to run from init, you can either use the <code>set init</=
code> statement in Monit's control file or use the <code>-I</code> option=
 from the command line. Here is what you must add to <code>/etc/inittab</co=
de>:</p>

<pre><code>  # Run Monit in standard run-levels
  mo:2345:respawn:/usr/local/bin/monit -Ic /etc/monitrc</code></pre>

<p>After you have modified init's configuration file, you can run the follo=
wing command to re-examine /etc/inittab and start Monit:</p>

<pre><code>  telinit q</code></pre>

<p>For systems without telinit:</p>

<pre><code>  kill -1 1</code></pre>

<p>If Monit is used to monitor services that are also started at boot time=
 (e.g. services started via SYSV init rc scripts or via inittab) then, in=
 some cases, a race condition could occur. That is; if a service is slow to=
 start, Monit can assume that the service is not running and possibly try=
 to start it and raise an alert, while, in fact the service is already abou=
t to start or already in its startup sequence. Please see the FAQ for a sol=
ution to this problem. The short version is to start Monit on a higher run-=
level after system processes.</p>

<h1 id=3D"INCLUDE-FILES">INCLUDE FILES</h1>

<p>The Monit control file, <code>monitrc</code>, can include additional con=
figuration files. This feature helps one to organise configuration into sep=
arate files instead of having everything in one file, if you like this kind=
 of thing. Include statements can be placed at virtually any place in <code=
>monitrc</code> though the convention is at the bottom. The syntax is the=
 following:</p>

<pre><code>  INCLUDE &lt;globstring&gt;</code></pre>

<p>The globstring is any kind of string as defined in <code>glob(7)</code>.=
 Thus, you can refer to a single file or you can load several files at once=
. If you want to use whitespace in your string the globstring needs to be=
 embedded into quotes (') or double quotes ("). If the globstring matches=
 a directory instead of a file, it is silently ignored.</p>

<p>Any <i>include</i> statements in an included file are parsed as in the=
 main control file.</p>

<p>If the globstring matches several results, the files are included in a=
 non sorted manner. If you need to rely on a certain order, you should avoi=
d wild-card globbing and instead specify the full path of files included.</=
p>

<p>An example,</p>

<pre><code> include /etc/monit.d/*.cfg</code></pre>

<p>This will load any file matching the globstring. That is, all files in=
 <i>/etc/monit.d</i> that ends with the prefix <i>.cfg</i>.</p>

<h1 id=3D"SSL-OPTIONS">SSL OPTIONS</h1>

<p>Common SSL/TLS options can be set using the following statement and will=
 apply to all SSL connections made through Monit:</p>

<pre><code>  SET &lt;SSL | TLS&gt; [OPTIONS] {
      VERSION: &lt;AUTO | SSLV2 | SSLV3 | TLSV1 | TLSV11 | TLSV12&gt;
      VERIFY: &lt;ENABLE | DISABLE&gt;
      SELFSIGNED: &lt;ALLOW | REJECT&gt;
      CIPHERS: &lt;string&gt;
      PEMFILE: &lt;path&gt;
      CLIENTPEMFILE: &lt;path&gt;
      CACERTIFICATEFILE: &lt;path&gt;
      CACERTIFICATEPATH: &lt;path&gt;
  }</code></pre>

<p><i>VERSION</i> set the specific SSL/TLS version to use. By default Monit=
 uses AUTO. In AUTO mode, only TLS is used, SSLv2 and SSLv3 is considered=
 obsolete. If you have to use SSLv2 or SSLv3, you must explicitly set the=
 version.</p>

<p><i>VERIFY</i> enable SSL server certificate verification. This will veri=
fy and report an error if the server certificate is not trusted, not valid=
 or has expired. By default certificate verification is disabled, though we=
 recommend enabling it, otherwise there is no guarantee that Monit speaks=
 with the server you think it speaks with.</p>

<p><i>SELFSIGNED</i> self-signed certificates are rejected by default. Use=
 this option to allow self-signed certificates. Warning: not recommended in=
 production for security reasons, as in such case the client cannot verify=
 it talks to the correct server and attack types like man-in-the-middle or=
 DNS hijacking are possible).</p>

<p><i>CIPHERS</i> override default SSL/TLS ciphers.</p>

<p><i>PEMFILE</i> set the path to the SSL server certificate "database-file=
" in PEM format. This options has effect only for the monit HTTP interface.=
</p>

<p><i>CLIENTPEMFILE</i> set the path to the PEM encoded SSL client certific=
ates database file. If set, a client certificate authentication is enabled.=
</p>

<p><i>CACERTIFICATEFILE</i> set the path to the PEM encoded file containing=
 Certificate Authority (CA) certificates. Monit uses OpenSSL's default CA=
 certificates if this options is not used (<i>openssl version -d</i> can be=
 used to get the default CA certificates). Many distributions comes with SS=
L and CA certificates already setup and using this option is normally not=
 necessary.</p>

<p><i>CACERTIFICATEPATH</i> set the path to the directory containing Certif=
icate Authority (CA) certificates. Monit uses OpenSSL's default CA certific=
ates if this options is not used. Many distributions comes with SSL and CA=
 certificates already setup and using this option is normally not necessary=
.</p>

<p>The SSL options statement will globally apply to all SSL/TLS connection=
 made through Monit. SSL options can also be set in a local check, in <i>ma=
ilserver</i> settings or in the <i>mmonit</i> statement, and will then over=
ride or extend the global settings.</p>

<p>To set global SSL options, put this statement near the top of your <i>.m=
onitrc</i> file:</p>

<pre><code>    set ssl options {...}</code></pre>

<p>Here is an example of setting both global and local SSL options:</p>

<pre><code>    # Enable certificate verification for all SSL connections
    # Self-signed certificates are not allowed by default
    set ssl options {
            verify: enable
    }

    # Verify certificate (via global setting)
    # Allow self-signed certificate for this check
    check host example with address example.com
            if failed
                    port 443
                    protocol https
                    with ssl options {selfsigned: allow}
            then alert

    # Do not verify example2.com's certificate (override global setting)
    check host example2 with address example2.com
            if failed
                    port 443
                    protocol https
                    with ssl options {verify: disable}
            then alert</code></pre>

<h1 id=3D"FIPS-MODE">FIPS MODE</h1>

<p>To enable FIPS mode (provided your OpenSSL library supports it), add thi=
s statement to Monit control file:</p>

<pre><code>  SET FIPS</code></pre>

<h1 id=3D"MONIT-HTTPD">MONIT HTTPD</h1>

<p>If specified in the control file, Monit will start with HTTP support. Yo=
u can then use Monit CLI to start and stop services, disable or enable serv=
ice monitoring as well as view the status of each service.</p>

<p>If HTTP support is enabled over TCP rather than over a Unix Socket, you=
 can also view Monit's informative dashboard in your web browser.</p>

<p>Note that if HTTP support is disabled, the Monit CLI interface will have=
 reduced functionality, as most CLI commands (such as "monit status") needs=
 to communicate with the Monit background process via the HTTP interface.=
 We strongly recommend having HTTP support enabled. If security is a concer=
n, bind the HTTP interface to local host only or use Unix Socket so Monit=
 is not accessible from the outside.</p>

<h2 id=3D"UNIX-SOCKET">UNIX SOCKET</h2>

<p>Syntax for Unix Socket:</p>

<pre><code>  SET HTTPD UNIXSOCKET &lt;path&gt;
      ALLOW &lt;user:password&gt;+</code></pre>

<p>Example:</p>

<pre><code> set httpd unixsocket /var/run/monit.sock
     allow username:password</code></pre>

<p><b>UNIXSOCKET</b> set the path to the Unix Socket Monit should bind to=
 and listen on.</p>

<h2 id=3D"TCP-PORT">TCP PORT</h2>

<p>Syntax for TCP port:</p>

<pre><code>  SET HTTPD PORT &lt;number&gt;
      [ADDRESS &lt;hostname | IP-address&gt;]
      [[with] SSL {pemfile: &lt;path&gt;}]
      ALLOW &lt;user:password | IP-address | IP-range&gt;+</code></pre>

<p><b>PORT</b> set the port Monit should bind to and listen on. Monit is us=
ually setup on port 2812. Example:</p>

<pre><code> set httpd port 2812
     allow username:password</code></pre>

<p>You can now use <a href=3D"http://localhost:2812/">http://localhost:2812=
/</a> to access Monit's web interface from a browser, after you have entere=
d username and password as credentials. You might need to use double quotes=
 around the password if it cointains special chars such as "p@ssw:r#".</p>

<p><b>ADDRESS</b> make Monit listen on a specific interface only. For examp=
le if you <i>don't</i> want to expose Monit's web interface to the network,=
 bind it to localhost only. Monit will accept connections on any addresses=
 if the ADDRESS option is not used:</p>

<pre><code> set httpd
     port 2812
     use address 127.0.0.1
     allow username:password</code></pre>

<p>Monit HTTP over TCP supports both IP version 4 and 6. Support is transpa=
rent and does not require any special configuration. If the bind <i>address=
</i> is <b>not</b> specified as in this example:</p>

<pre><code>  set httpd
    port 2812
    allow ...</code></pre>

<p>Monit will bind to and listen on port 2812 on all interfaces, both IPv4=
 and IPv6 if available. To force Monit HTTP to only listen on and accept co=
nnections over IP version 6, specify an IPv6 address:</p>

<pre><code>  set httpd
    port 2812
    use address "fe80::222:19ff:fe53:6c59"
    allow ...</code></pre>

<p>Likewise, to force Monit HTTP to only listen on and accept connections=
 over IP version 4, specify an IPv4 address:</p>

<pre><code>  set httpd
    port 2812
    use address 62.109.39.247
    allow ...</code></pre>

<h3 id=3D"SSL-settings">SSL settings</h3>

<p><b>SSL</b> enable SSL/TLS for Monit's web interface. See <a href=3D"#SSL=
-OPTIONS">options</a> for full list of SSL options.</p>

<p><i>PEMFILE</i> set the path to the PEM encoded file, which contains the=
 server's private key and certificate. This file should be stored in a safe=
 place on the filesystem and should have strict permissions, no more than=
 0700.</p>

<p>Example:</p>

<pre><code> set httpd
     port 2812
     with ssl {
        pemfile: /etc/ssl/certs/monit.pem
     }
     allow myuser:mypassword</code></pre>

<p>You can now use <a href=3D"https://localhost:2812/">https://localhost:28=
12/</a> to access the Monit web server over a TLS encrypted connection.</p>

<p>Self-signed server certificates note: The Monit CLI works on a client-se=
rver basis and uses the Monit HTTP GUI to collect status from the Monit dae=
mon and pass commands like start/stop to it. As self-signed certificates ar=
e rejected by default for security reasons, the CLI won't work unless you=
 explicitly allow it by using the <i>SELFSIGNED: ALLOW</i> option:</p>

<pre><code>  set httpd
     port 2812
     with ssl {
        pemfile: /etc/ssl/certs/monit.pem
        selfsigned: allow
     }
     allow myuser:mypassword</code></pre>

<p><b>CLIENTPEMFILE</b> enables a client certificate based authentication=
 and sets the path to a PEM encoded database file, that contains a list of=
 allowed client certificates. A connecting client has to provide a certific=
ate known to Monit (listed in <i>clientpemfile</i>), otherwise it is reject=
ed. This file must also include all necessary CA certificates. By default=
 self-signed client certificates are <b>rejected</b> for security reasons,=
 if you want to allow self-signed client certificates (recommended only for=
 testing), you have to allow it explicitly using the <b>SELFSIGNED: ALLOW</=
b> option (see the example above). See your browser's documentation for how=
 to import client certificate to it.</p>

<p>Example:</p>

<pre><code> set httpd
     port 2812
     with SSL {
         pemfile:       /etc/ssl/certs/monit.pem
         clientpemfile: /etc/ssl/certs/monit-client.pem
     }</code></pre>

<h2 id=3D"Monit-version-signature">Monit version signature</h2>

<p><b>SIGNATURE</b> can be used to hide Monit version from the HTTP respons=
e header and error pages. For example:</p>

<pre><code>  set httpd
    port 2812
    signature disable
    allow myuser:mypassword</code></pre>

<h2 id=3D"Authentication">Authentication</h2>

<p>Access to the Monit web interface is controlled primarily via the <b>ALL=
OW</b> option which is used to specify authentication and authorise only sp=
ecific clients to connect.</p>

<p>If the Monit command line interface is being used, at least one cleartex=
t password is necessary (see below), otherwise the Monit command line inter=
face will not be able to connect to the Monit web interface.</p>

<p>Clients that try to connect to Monit, but submit a wrong username and/or=
 password are logged with their IP-address.</p>

<h3 id=3D"Client-certificates">Client certificates</h3>

<p>This authentication method is a strong authentication mechanism and empl=
oy HTTPS client certificates to verify the authenticity of a connecting cli=
ent. Clients must posses a Public Key Certificate known by Monit. The clien=
t must connect to Monit over SSL and Monit will ask the client to send its=
 certificate. Upon receiving the certificate Monit compares the certificate=
 to certificates located in the <i>CLIENTPEMFILE</i> file. Access is grante=
d if the client certificate is in this file. See <a href=3D"#SSL-settings">=
SSL</a> settings for details.</p>

<h3 id=3D"Basic-Authentication">Basic Authentication</h3>

<p>Monit supports Basic Authentication as described in RFC 2617.</p>

<p>In short; a server challenge a client (e.g. a Browser) to send authentic=
ation information (username and password) and if accepted, the server will=
 allow the client access to the requested document.</p>

<p>The biggest weakness with Basic Authentication is that username and pass=
word is sent in clear-text over the network (i.e. base64 encoded). It is th=
erefor recommended that you do not use this authentication method unless yo=
u run Monit with <i>ssl</i> support. With ssl, it is safe to use Basic Auth=
entication since <i>all</i> HTTP data, including Basic Authentication heade=
rs will be encrypted.</p>

<h4 id=3D"Cleartext-user-and-password">Cleartext user and password</h4>

<p>Monit will use Basic Authentication if an allow statement contains a use=
rname and a password separated with a single ':' character.</p>

<p>Note: Special characters can be used, but for non-alphanumerics the pass=
word has to be quoted.</p>

<p>Syntax:</p>

<pre><code> ALLOW &lt;username&gt;:&lt;password&gt;</code></pre>

<h3 id=3D"Host-and-network-allow-list">Host and network allow list</h3>

<p>Monit maintains an access-control list of hosts and networks allowed to=
 connect. You can add as many hosts as you want to, but only hosts with a=
 valid domain name or its IP address are allowed.</p>

<p>Monit will query a name server to check any hosts trying to connect. If=
 a host (client) is trying to connect, but cannot be found in the access li=
st or cannot be resolved, Monit will shutdown the connection to the client=
 promptly.</p>

<p>Control file example:</p>

<pre><code>  set httpd port 2812
      allow localhost
      allow my.other.work.machine.com
      allow 10.1.1.1
      allow 192.168.1.0/255.255.255.0
      allow 10.0.0.0/8</code></pre>

<p>Clients, not mentioned in the allow list and trying to connect to Monit=
 will be denied access and are logged with their IP-address.</p>

<h4 id=3D"PAM">PAM</h4>

<p>PAM is supported on platforms which provide PAM (such as Linux, Mac OS=
 X, FreeBSD, NetBSD).</p>

<p>Syntax:</p>

<pre><code> ALLOW @&lt;group&gt;</code></pre>

<p>where <code>group</code> is the group name allowed to access Monit's web=
 interface. Monit uses a PAM service called <i>monit</i> for PAM authentica=
tion, see the PAM manual page for detailed instructions on how to set the=
 PAM service and PAM authentication plugins.</p>

<p>Sample PAM service for Monit on Mac OS X (store as "/etc/pam.d/monit" fi=
le):</p>

<pre><code>  # monit: auth account password session
  auth       sufficient     pam_securityserver.so
  auth       sufficient     pam_unix.so
  auth       required       pam_deny.so
  account    required       pam_permit.so</code></pre>

<p>A <code>monitrc</code> config which only allows group <code>admin</code>=
 authenticated via PAM to access the web interface:</p>

<pre><code>  set httpd
      port 2812
      allow @admin</code></pre>

<h4 id=3D"htpasswd-file">htpasswd file</h4>

<p>Alternatively you store credentials in a <code>htpasswd</code> formated=
 file (one <i>user:passwd</i> entry per line), like so: <i>allow [cleartext=
|crypt|md5] /path [users]</i>. The default is cleartext passwords. In case=
 passwords are digested it is necessary to specify the cryptographic method=
. If you do not want all users in the password file to have access to Monit=
, you can specify only those users that should have access in the allow sta=
tement. Otherwise all users are added.</p>

<p>Example1:</p>

<pre><code>  set httpd port 2812
      allow md5 /etc/httpd/htpasswd john paul ringo george</code></pre>

<p>If you use this method together with a host list, then only clients from=
 the listed hosts will be allowed to connect to the Monit HTTP server and=
 each client will be asked to provide a username and a password.</p>

<p>Example2:</p>

<pre><code>  set httpd port 2812
      allow localhost
      allow 10.1.1.1
      allow hauk:"passw@rd"</code></pre>

<p>If you only want to use Basic Authentication, then just provide allow en=
tries with username and password or password files as in example 1 above.</=
p>

<h4 id=3D"Read-only-users">Read-only users</h4>

<p>Finally it is possible to define some users as read-only. A read-only us=
er can read the Monit web pages but will <i>not</i> get access to push-butt=
ons and cannot change a service from the web interface.</p>

<pre><code>  set httpd port 2812
      allow admin:password
      allow hauk:password read-only
      allow @admins
      allow @users read-only</code></pre>

<p>A user is set to read-only by using the <i>read-only</i> keyword <b>afte=
r</b> username:password. In the above example the user <i>hauk</i> is defin=
ed as a read-only user, while the <i>admin</i> user has all access rights.<=
/p>

<h1 id=3D"ALERT-MESSAGES">ALERT MESSAGES</h1>

<p>Monit will raise an alert in the following situations:</p>

<pre><code> o A service does not exist (e.g. process is not running)
 o Cannot read service data (e.g. cannot get filesystem usage)
 o Execution of a service related script failed (e.g. start failed)
 o Invalid service type (e.g. if path points to directory instead of file)
 o Custom test script returned error
 o Ping test failed
 o TCP/UDP connection and/or port test failed
 o Resource usage test failed (e.g. cpu usage too high)
 o Checksum mismatch or change (e.g. file changed)
 o File size test failed (e.g. file too large)
 o Timestamp test failed (e.g. file is older then expected)
 o Permission test failed (e.g. file mode doesn't match)
 o An UID test failed (e.g. file owned by different user)
 o A GID test failed (e.g. file owned by different group)
 o A process' PID changed out of Monit's control
 o A process' PPID changed out of Monit control
 o Too many service recovery attempts failed
 o A file content test found a match
 o Filesystem flags changed
 o A service action was performed by administrator
 o A network link failed
 o A network link capacity changed
 o A network link saturation failed
 o A network link upload/download rate failed
 o Monit was started, stopped or reloaded</code></pre>

<p>To get an alert via e-mail, set the alert target using the global <code>=
set alert</code> statement (for all services) or the <code>alert</code> sta=
tement in the context of a service entry (for a single service).</p>

<h2 id=3D"Setting-an-alert-recipient">Setting an alert recipient</h2>

<p>If an event occurs, Monit will send an alert. There are two kinds of ale=
rt statement: global and local.</p>

<p>Global syntax:</p>

<pre><code> SET ALERT mail-address [[NOT] {event, ...}] [REMINDER cycles]</=
code></pre>

<p>Example:</p>

<pre><code> set alert foo@bar</code></pre>

<p>will send a default email to the address foo@bar whenever any event occu=
rs on any service.</p>

<p>If you want to send alert messages to more email addresses, add a <code>=
set alert 'email'</code> statement for each address.</p>

<p>It is also possible to use the local alert statement in the context of=
 a service check to enable alert for the given service only:</p>

<pre><code> ALERT mail-address [[NOT] {event, ...}] [REMINDER cycles]</code=
></pre>

<p>Local alert example:</p>

<pre><code> check host myhost with address 1.2.3.4
     if failed port 3306 protocol mysql then alert
     if failed port 80 protocol http then alert
     alert foo@baz # Local service alert</code></pre>

<p>You can combine global and local alert statements. If there is a conflic=
t, the local alert has precedence and overrides the global statement.</p>

<h3 id=3D"Setting-an-event-filter">Setting an event filter</h3>

<p>If you only want an alert message sent for certain events, list them in=
 an <code>{event, ...}</code> block, e.g.:</p>

<pre><code> set alert foo@bar only on { timeout, nonexist }</code></pre>

<p>The event list can also be negated to send alerts for all events <i>exce=
pt</i> those which are listed, by prepending the list with the word <code>n=
ot</code>. For example, to receive all alerts except notification about Mon=
it program start and stop:</p>

<pre><code> set alert foo@bar but not on { instance }</code></pre>

<p>Here is a list of all possible event types emitted by Monit. Values from=
 the first column can be used in the event filter list mentioned above:</p>

<pre><code> Event:     | Failure state:              | Success state:
 ---------------------------------------------------------------------
 action     | "Action failed"             | "Action done"
 checksum   | "Checksum failed"           | "Checksum succeeded"
 bytein     | "Download bytes exceeded"   | "Download bytes ok"
 byteout    | "Upload bytes exceeded"     | "Upload bytes ok"
 connection | "Connection failed"         | "Connection succeeded"
 content    | "Content failed",           | "Content succeeded"
 data       | "Data access error"         | "Data access succeeded"
 exec       | "Execution failed"          | "Execution succeeded"
 fsflags    | "Filesystem flags failed"   | "Filesystem flags succeeded"
 gid        | "GID failed"                | "GID succeeded"
 icmp       | "Ping failed"               | "Ping succeeded"
 instance   | "Monit instance changed"    | "Monit instance changed not"
 invalid    | "Invalid type"              | "Type succeeded"
 link       | "Link down"                 | "Link up"
 nonexist   | "Does not exist"            | "Exists"
 packetin   | "Download packets exceeded" | "Download packets ok"
 packetout  | "Upload packets exceeded"   | "Upload packets ok"
 permission | "Permission failed"         | "Permission succeeded"
 pid        | "PID failed"                | "PID succeeded"
 ppid       | "PPID failed"               | "PPID succeeded"
 resource   | "Resource limit matched"    | "Resource limit succeeded"
 saturation | "Saturation exceeded"       | "Saturation ok"
 size       | "Size failed"               | "Size succeeded"
 speed      | "Speed failed"              | "Speed ok"
 status     | "Status failed"             | "Status succeeded"
 timeout    | "Timeout"                   | "Timeout recovery"
 timestamp  | "Timestamp failed"          | "Timestamp succeeded"
 uid        | "UID failed"                | "UID succeeded"
 uptime     | "Uptime failed"             | "Uptime succeeded"</code></pre>

<p>Each alert recipient can have it's own filter, for example:</p>

<pre><code> set alert foo@bar { nonexist, timeout, resource, icmp, connecti=
on }
 set alert security@bar on { checksum, permission, uid, gid }
 set alert admin@bar</code></pre>

<h3 id=3D"Setting-an-error-reminder">Setting an error reminder</h3>

<p>Monit by default sends just <i>one</i> notification if a service failed=
 and another when/if it recovers. If you want to be notified that the servi=
ce is still in a failed state, you can use the reminder option in the alert=
 statement:</p>

<pre><code> SET ALERT mail-address [WITH] REMINDER [ON] number [CYCLES]</co=
de></pre>

<p>For example if you want to be notified each tenth cycle if a service rem=
ains in a failed state, you can use:</p>

<pre><code> alert foo@bar with reminder on 10 cycles</code></pre>

<p>Likewise if you want to be notified on each failed cycle, you can use:</=
p>

<pre><code>  alert foo@bar with reminder on 1 cycle</code></pre>

<h2 id=3D"Disabling-alerts-for-some-service">Disabling alerts for some serv=
ice</h2>

<p>To suppress alerts for some user and service, add the <code>noalert</cod=
e> statement in the context of a service check.</p>

<pre><code> NOALERT mail-address</code></pre>

<p>Example (send all alerts to foo@bar except for service p3):</p>

<pre><code> set alert foo@bar

 check process p1 with pidfile /var/run/p1.pid

 check process p2 with pidfile /var/run/p2.pid

 check process p3 with pidfile /var/run/p3.pid
     noalert foo@bar</code></pre>

<h2 id=3D"Message-format">Message format</h2>

<p>The alert message format can be modified by using the <code>set mail-for=
mat</code> statement:</p>

<pre><code> SET MAIL-FORMAT {mail-format}</code></pre>

<p>Example:</p>

<pre><code> set mail-format {
      from: Monit Support &lt;monit@foo.bar&gt;
  reply-to: support@domain.com
   subject: $SERVICE $EVENT at $DATE
   message: Monit $ACTION $SERVICE at $DATE on $HOST: $DESCRIPTION.
            Yours sincerely,
            monit
 }</code></pre>

<p>The <i>from:</i> option is the sender's email address for Monit alerts.=
 A sender's name is optional, but if used, requires that the subsequent ema=
il-address is enclosed in angle brackets as in the example above.</p>

<p>The <i>reply-to:</i> option can be used to set the reply-to mail header,=
 optionally with a name.</p>

<p>The <i>subject:</i> option sets the message subject and must be on only=
 <i>one</i> line.</p>

<p>The <i>message:</i> option sets the mail body. This option should always=
 be the last in a mail-format statement. The mail body can be as long as ne=
eded, but must <i>not</i> contain the block-closing '}' character.</p>

<p>You need not use all options, only the option which you want to override=
. For example to globally change the sender address only:</p>

<pre><code> set mail-format { from: bofh@foo.bar }</code></pre>

<p>The subject and body may contain $NAME variables, which are expanded by=
 Monit. Here is a list of variables that can be used when composing an aler=
t message.</p>

<ul>

<li><p><i>$EVENT</i></p>

<p>A string describing the event that occurred.</p>

</li>
<li><p><i>$SERVICE</i></p>

<p>The service name</p>

</li>
<li><p><i>$DATE</i></p>

<p>The current time and date (RFC 822 date style).</p>

</li>
<li><p><i>$HOST</i></p>

<p>The name of the host Monit is running on</p>

</li>
<li><p><i>$ACTION</i></p>

<p>The name of the action which was done by Monit.</p>

</li>
<li><p><i>$DESCRIPTION</i></p>

<p>The description of the error condition</p>

</li>
</ul>

<h2 id=3D"Setting-a-mail-server-for-alert-delivery">Setting a mail server=
 for alert delivery</h2>

<p>The mail server Monit should use to send alert messages is defined with=
 a <code>set mailserver</code> statement:</p>

<pre><code> SET MAILSERVER
        &lt;hostname|ip-address&gt;
        [PORT number]
        [USERNAME string] [PASSWORD string]
        [using SSL [with options {...}]
        [CERTIFICATE CHECKSUM [MD5|SHA1] &lt;hash&gt;],
        ...
   [with TIMEOUT X SECONDS]
   [using HOSTNAME hostname]</code></pre>

<p>Multiple mail servers can be set by using a comma separated list. If Mon=
it cannot connect to the first server, it will try the next in the list and=
 so on.</p>

<p>The port statement allows one to override the default SMTP port (465 for=
 SSL, or 25 for TLS and non secure connection).</p>

<p>Monit supports AUTH PLAIN and AUTH LOGIN for SMTP authentication. You ca=
n set a username and a password using the USERNAME and PASSWORD options.</p>

<p>You can set SSL/TLS <a href=3D"#SSL-OPTIONS">options</a> for the connect=
ion and also check a SSL certificate checksum.</p>

<p>The default connection timeout is 5 seconds. You can rise this limit usi=
ng the TIMEOUT option.</p>

<p>Example (setting two mail servers for failover):</p>

<pre><code> set mailserver smtp.gmail.com, smtp.other.host</code></pre>

<p>By default, Monit uses the local host name in SMTP HELO/EHLO and in the=
 Message-ID header. You can override this using the HOSTNAME option.</p>

<h2 id=3D"Event-queue">Event queue</h2>

<p>If no mail server is available, Monit <i>can</i> queue events in the loc=
al file-system for retry until the mail server recovers.</p>

<p>If Monit is used with M/Monit, the event queue provides a safe event sto=
re for M/Monit in the case of temporary problems.</p>

<p>The event queue is persistent across Monit restarts and provided that th=
e back-end filesystem is persistent, across system restart as well.</p>

<p>By default, the queue is disabled and if the alert handler fails, Monit=
 will simply drop the alert message.</p>

<p>To enable the event queue, add the following statement:</p>

<pre><code> SET EVENTQUEUE BASEDIR &lt;path&gt; [SLOTS &lt;number&gt;]</cod=
e></pre>

<p>The &lt;path&gt; is the path to the directory where events will be store=
d.</p>

<p>Optionally if you want to limit the queue size, use the slots option to=
 only store up to <i>number</i> event messages.</p>

<p>Example:</p>

<pre><code>  set eventqueue basedir /var/monit slots 5000</code></pre>

<p>If you are running more then one Monit instance on the same machine, you=
 <b>must</b> use separated event queue directories.</p>

<h1 id=3D"SERVICE-METHODS">SERVICE METHODS</h1>

<p>Each service can have associated <i>start</i>, <i>stop</i> and <i>restar=
t</i> methods which Monit can use to execute action on the service.</p>

<p>Syntax:</p>

<pre><code> &lt;START | STOP | RESTART&gt; [PROGRAM] =3D "program"
        [[AS] UID &lt;number | string&gt;]
        [[AS] GID &lt;number | string&gt;]
        [[WITH] TIMEOUT &lt;number&gt; SECOND(S)]</code></pre>

<p>If the <code>program</code> is a shell script it must begin with <code>#=
!</code> and the remainder of the first line must specify an interpreter fo=
r the program. e.g. <code>#!/bin/sh</code></p>

<p>The <code>program</code> must also be executable (for example mode 0755)=
.</p>

<p>It's possible to write scripts directly into the <i>program</i> this way=
:</p>

<pre><code> stop =3D "/bin/bash -c 'kill -s SIGTERM `cat /var/run/process.p=
id`'"</code></pre>

<p>By default the program is executed as the user under which Monit is runn=
ing. If Monit is running as root, you may optionally specify the <i>UID</i>=
 and <i>GID</i> the executed program should switch to.</p>

<p>Example:</p>

<pre><code> check process mmonit with pidfile /usr/local/mmonit/mmonit/logs=
/mmonit.pid
   start program =3D "/usr/local/mmonit/bin/mmonit" as uid "mmonit" and gid=
 "mmonit"
   stop program =3D "/usr/local/mmonit/bin/mmonit stop" as uid "mmonit" and=
 gid "mmonit"</code></pre>

<p>In the case of a process check, Monit will wait up to 30 seconds for the=
 start/stop action to finish before giving up and report an error. You can=
 override this timeout using the <i>TIMEOUT</i> option or globally using th=
e <a href=3D"#LIMITS">set limits</a>.</p>

<p>Example:</p>

<pre><code> check process foobar with pidfile /var/run/foobar.pid
   start program =3D "/etc/init.d/foobar start" with timeout 60 seconds
   stop program =3D "/etc/init.d/foobar stop"</code></pre>

<h1 id=3D"SERVICE-POLL-TIME">SERVICE POLL TIME</h1>

<p>Services are checked regularly in an interval defined by the <code>set=
 daemon n</code> statement. Checks are performed in the same order as they=
 are written in the <code>.monitrc</code> file, except if dependencies are=
 setup between services, where pre-requisite services are tested first.</p>

<p>It is possible to modify a service check schedule by using the <code>eve=
ry</code> statement.</p>

<p>There are three variants:</p>

<dl>

<dt id=3D"A-poll-cycle-multiple">1. A poll cycle multiple</dt>
<dd>

<pre><code> EVERY [number] CYCLES</code></pre>

</dd>
<dt id=3D"Cron-style">2. Cron-style</dt>
<dd>

<pre><code> EVERY [cron]</code></pre>

</dd>
<dt id=3D"Negative-Cron-style-do-not-check">3. Negative Cron-style (do-not-=
check)</dt>
<dd>

<pre><code> NOT EVERY [cron]</code></pre>

</dd>
</dl>

<p>A cron-style string consist of 5 fields separated with white-space. All=
 fields are required:</p>

<pre><code> Name:        | Allowed values:            | Special characters:
 ---------------------------------------------------------------
 Minutes      | 0-59                       | * - ,
 Hours        | 0-23                       | * - ,
 Day of month | 1-31                       | * - ,
 Month        | 1-12 (1=3Djan, 12=3Ddec)       | * - ,
 Day of week  | 0-6 (0=3Dsunday, 6=3Dsaturday) | * - ,</code></pre>

<p>The special characters:</p>

<pre><code> Character:   | Description:
 ---------------------------------------------------------------
 * (asterisk) | The asterisk indicates that the expression will
              | match for all values of the field; e.g., using
              | an asterisk in the 4th field (month) would
              | indicate every month.
 - (hyphen)   | Hyphens are used to define ranges. For example,
              | 8-9 in the hour field indicate between 8AM and
              | 9AM. Note that range is from start time until and
              | including end time. That is, from 8AM and until
              | 10AM unless minutes are set. Another example,
              | 1-5 in the weekday field, specify from monday to
              | friday (including friday).
 , (comma)    | Comma are used to specify a sequence. For example
              | 17,18 in the day field indicate the 17th and 18th
              | day of the month. A sequence can also include
              | ranges. For example, using 1-5,0 in the weekday
              | field indicate monday to friday and sunday.</code></pre>

<p>Example 1: Check once per two cycles</p>

<pre><code> check process nginx with pidfile /var/run/nginx.pid
       every 2 cycles</code></pre>

<p>Example 2: Check every workday between 8AM to 7PM</p>

<pre><code> check program checkOracleDatabase
        with path /var/monit/programs/checkoracle.pl
       every "* 8-19 * * 1-5"</code></pre>

<p>Example 3: Do not run the check in the backup window on Sunday between=
 0AM to 3AM, otherwise run the check with the regular poll cycle frequency.=
</p>

<pre><code> check process mysqld with pidfile /var/run/mysqld.pid
       not every "* 0-3 * * 0"</code></pre>

<p>Limitations:</p>

<p>The current scheduler is poll cycle based. If a service check is schedul=
ed with the <i>every cron</i> statement, Monit will check if the current ti=
me match the cron-string pattern. If it does, then the check is performed=
 otherwise it is skipped. The cron specification does not guarantee when ex=
actly the test will run, this depends on the default poll time and the leng=
th of the check cycle. In other words, we cannot guarantee that Monit will=
 run on a specific time. Therefor we <b>strongly</b> recommend to use an as=
terix in the minute field or at minimum a range, e..g. 0-15. <b>Never</b>=
 use a specific minute as Monit may not run on that minute.</p>

<p>We will address this limitation in a future release and convert the sche=
duler from serial polling into a parallel non-blocking scheduler where chec=
ks are guaranteed to run on time and with seconds resolution.</p>

<h1 id=3D"SERVICE-GROUPS">SERVICE GROUPS</h1>

<p>Service entries in the control file, <i>monitrc</i>, can be grouped toge=
ther by the <i>group</i> statement. The syntax is simply (keyword in capita=
l):</p>

<pre><code>  GROUP groupname</code></pre>

<p>With this statement it is possible to group similar service entries toge=
ther and manage them as a whole. Monit provides functions to start, stop,=
 restart, monitor and unmonitor a group of services, like so:</p>

<p>To start a group of services from the console:</p>

<pre><code>  monit -g &lt;groupname&gt; start</code></pre>

<p>To stop a group of services:</p>

<pre><code>  monit -g &lt;groupname&gt; stop</code></pre>

<p>To restart a group of services:</p>

<pre><code>  monit -g &lt;groupname&gt; restart</code></pre>

<p>A service can be added to multiple groups by using more than one group=
 statement:</p>

<pre><code>  group www
  group filesystem</code></pre>

<h1 id=3D"SERVICE-MONITORING-MODE">SERVICE MONITORING MODE</h1>

<p>Monit supports two monitoring modes: <i>active</i> and <i>passive</i>.</=
p>

<p>Syntax:</p>

<pre><code>  MODE &lt;ACTIVE | PASSIVE&gt;</code></pre>

<p>In <i>active</i> mode, Monit will pro-actively monitor a service and in=
 case of problems raise alerts and restart the service. Active is the defau=
lt mode.</p>

<p>The <i>passive</i> mode is similar to the <i>active</i> mode, except if=
 the service fails, monit will <b>not</b> try to fix a problem by restartin=
g the service and will raise alerts only.</p>

<h1 id=3D"SYSTEM-REBOOT-AND-SERVICE-STARTUP">SYSTEM REBOOT AND SERVICE STAR=
TUP</h1>

<p>Monit supports three reboot modes: <i>start</i>, <i>nostart</i> and <i>l=
aststate</i>.</p>

<p>Syntax:</p>

<pre><code>  ONREBOOT &lt;START | NOSTART | LASTSTATE&gt;</code></pre>

<p>In <i>start</i> mode, Monit will always start the service automatically=
 on reboot, even if it was stopped before restart. This is the default mode=
 and used if <i>onreboot</i> is not specified.</p>

<p>In <i>nostart</i> mode, the service is <i>never</i> started automaticall=
y after reboot. This mode is intended for a high-availability solutions wit=
h active/passive clusters. For example, a service group HA, consisting of=
 e.g. a mobile IP alias and an application server, is started on host H1,=
 host H2 is backup and heartbeat is in place between both hosts. The servic=
e group <i>HA</i> must be started on one node only. If H1 dies, H2 takes ov=
er the HA group. If H1 reboots, it is important that it won't try to start=
 the HA group also. Even though the group was active on H1 before it crashe=
d, as HA is running on H2 now.</p>

<p>In <i>laststate</i> mode, a service's monitoring state is persistent acr=
oss reboot. For instance, if a service was started before reboot, it willl=
 be started after reboot. If it was stopped before reboot, it will not be=
 started after and so on.</p>

<p>The default ONREBOOT START mode can be overriden globally:</p>

<pre><code>  SET ONREBOOT &lt;START | NOSTART | LASTSTATE&gt;</code></pre>

<h1 id=3D"SERVICE-RESTART-LIMIT">SERVICE RESTART LIMIT</h1>

<p><b>Monit</b> provides a restart limit mechanism for situations where a=
 service simply refuses to start or respond over a longer period.</p>

<p>The restart limit mechanism is based on number of service restarts and=
 number of poll-cycles. For example, if a service had <i>x</i> restarts wit=
hin <i>y</i> poll-cycles (where <i>x</i> &lt;=3D <i>y</i>) then Monit will=
 perform an action (for example unmonitor the service). If a timeout occurs=
, Monit will send an alert message if you have register interest for this=
 event.</p>

<p>The syntax for the timeout statement is as follows (keywords are in capi=
tal):</p>

<pre><code> IF &lt;number&gt; RESTART &lt;number&gt; CYCLE(S) THEN &lt;acti=
on&gt;</code></pre>

<p>The <i>action</i> value is either one of common <a href=3D"#ACTION">acti=
ons</a> or TIMEOUT (for backward compatibility, equals to UNMONITOR action)=
.</p>

<p>Here is an example where Monit will unmonitor the service if it was rest=
arted 2 times within 3 cycles:</p>

<pre><code> if 2 restarts within 3 cycles then unmonitor</code></pre>

<p>To have Monit check the service again after monitoring was disabled, run=
 <code>monit monitor servicename</code> from the command line.</p>

<p>Example for setting custom exec on timeout:</p>

<pre><code> if 5 restarts within 5 cycles then exec "/foo/bar"</code></pre>

<p>Example for stopping the service:</p>

<pre><code> if 7 restarts within 10 cycles then stop</code></pre>

<h1 id=3D"SERVICE-DEPENDENCIES">SERVICE DEPENDENCIES</h1>

<p>If specified in the control file, Monit can do dependency checking befor=
e start, stop, monitoring or unmonitoring of services. The dependency state=
ment may be used within any service entries in the Monit control file.</p>

<p>The syntax for the depend statement is simply:</p>

<pre><code> DEPENDS on service[, service [,...]]</code></pre>

<p>Where <b>service</b> is a check service entry name used in your <code>.m=
onitrc</code> file, for instance <b>apache</b> or <b>datafs</b>.</p>

<p>You may add more than one service name of any type or use more than one=
 depend statement in an entry.</p>

<p>Services specified in a <i>depend</i> statement will be checked during=
 stop/start/monitor/unmonitor operations.</p>

<p>If a service is stopped or unmonitored it will stop/unmonitor any servic=
es that depends on itself.</p>

<p>If the service is started, all services which this service depends on wi=
ll be started before starting this service. if start of some service failed=
, the service with prerequisites will NOT be started and the, but will reme=
mber that it should start and will retry next cycle.</p>

<p>If a service is restarted, it will first stop any active services that=
 depend on it and after it is started, start all depending services that we=
re active before the restart again.</p>

<p>Here is an example where we set up an apache service entry to depend on=
 the underlying apache binary. If the binary should change an alert is sent=
 and apache is not monitored anymore. The rationale is security and that Mo=
nit should not execute a possibly cracked apache binary.</p>

<pre><code> (1) check process apache with pidfile "/var/run/httpd.pid"
 (2)    depends on httpd
 (3)    ...
 (4)
 (5) check file httpd with path /usr/bin/httpd
 (6)    if failed checksum then stop</code></pre>

<p>The first entry is the process entry for apache. The second line sets up=
 a dependency between this entry and the service entry named httpd in line=
 5. A dependency tree works as follows, if an action is conducted in a lowe=
r branch it will propagate upward in the tree and for every dependent entry=
 execute the same action. In this case, if the checksum should fail in line=
 6 then an stop action is executed and apache binary is not checked anymore=
. But since the apache process entry depends on the httpd entry this entry=
 will also execute the stop action. In short, if the checksum test for the=
 httpd binary file should fail, both the check file httpd and the check pro=
cess apache entry are stopped.</p>

<p>A dependency tree is a general construct and can be used between all typ=
es of service entries and span many levels and propagate any supported acti=
on (except the exec action which will not propagate upward in a dependency=
 tree for obvious reasons).</p>

<p>Here is another different example. Consider the following common server=
 setup:</p>

<pre><code>  WEB-SERVER -&gt; APPLICATION-SERVER -&gt; DATABASE -&gt; FILES=
YSTEM
      (a)               (b)             (c)          (d)</code></pre>

<p>You can set dependencies so that the web-server depends on the applicati=
on server to run before the web-server starts and the application server de=
pends on the database server and the database depends on the filesystem to=
 be mounted before it starts. See also the example section below for exampl=
es using the depend statement.</p>

<p>Here we describe how Monit will function with the above dependencies:</p>

<dl>

<dt id=3D"If-no-services-are-running">If no services are running</dt>
<dd>

<p>Monit will start the servers in the following order: <i>d</i>, <i>c</i>,=
 <i>b</i>, <i>a</i></p>

</dd>
<dt id=3D"If-all-servers-are-running">If all servers are running</dt>
<dd>

<p>When you run 'monit stop all' this is the stop order: <i>a</i>, <i>b</i>=
, <i>c</i>, <i>d</i>. If you run 'Monit stop d' then <i>a</i>, <i>b</i> and=
 <i>c</i> are also stopped because they depend on <i>d</i> and finally <i>d=
</i> is stopped.</p>

</dd>
<dt id=3D"If-a-does-not-run">If <i>a</i> does not run</dt>
<dd>

<p>Monit will start <i>a</i></p>

</dd>
<dt id=3D"If-b-does-not-run">If <i>b</i> does not run</dt>
<dd>

<p>Monit will first stop <i>a</i> then start <i>b</i> and finally start <i>=
a</i> if <i>b</i> is up again.</p>

</dd>
<dt id=3D"If-c-does-not-run">If <i>c</i> does not run</dt>
<dd>

<p>Monit will first stop <i>a</i> and <i>b</i> then start <i>c</i> and fina=
lly start <i>b</i> then <i>a</i>.</p>

</dd>
<dt id=3D"If-d-does-not-run">If <i>d</i> does not run</dt>
<dd>

<p>Monit will first stop <i>a</i>, <i>b</i> and <i>c</i> then start <i>d</i=
> and finally start <i>c</i>, <i>b</i> then <i>a</i>.</p>

</dd>
<dt id=3D"If-the-control-file-contains-a-depend-loop">If the control file=
 contains a depend loop.</dt>
<dd>

<p>A depend loop is for example; a-&gt;b and b-&gt;a or a-&gt;b-&gt;c-&gt;a=
.</p>

<p>When Monit starts it will check for such loops and complain and exit if=
 a loop was found. It will also exit with a complaint if a depend statement=
 was used that does not point to a service in the control file.</p>

</dd>
</dl>

<h1 id=3D"SERVICE-TESTS">SERVICE TESTS</h1>

<h3 id=3D"LIMITS">LIMITS</h3>

<p>You can configure and set various limits to tweak buffer sizes and timeo=
uts used by Monit. In most situations the default values are fine. If neede=
d, below are the limits you can currently modify in Monit.</p>

<p>Syntax:</p>

<pre><code> SET LIMITS {
   PROGRAMOUTPUT:     &lt;number&gt; &lt;unit&gt;,
   SENDEXPECTBUFFER:  &lt;number&gt; &lt;unit&gt;,
   FILECONTENTBUFFER: &lt;number&gt; &lt;unit&gt;,
   HTTPCONTENTBUFFER: &lt;number&gt; &lt;unit&gt;,
   NETWORKTIMEOUT:    &lt;number&gt; &lt;timeunit&gt;
   PROGRAMTIMEOUT:    &lt;number&gt; &lt;timeunit&gt;
   STOPTIMEOUT:       &lt;number&gt; &lt;timeunit&gt;
   STARTTIMEOUT:      &lt;number&gt; &lt;timeunit&gt;
   RESTARTTIMEOUT:    &lt;number&gt; &lt;timeunit&gt;
 }</code></pre>

<p>Where: <i>unit</i> is "B" (byte), "kB" (kilobyte) or "MB" (megabyte) <i>=
timeunit</i> is "MS" (millisecond) or "S" (second)</p>

<p>Options legend:</p>

<pre><code> ---------------------------------------------------------------=
-------------------
 | Option            | Description                                      |=
 Default |
 --------------------------------------------------------------------------=
--------
 | programOutput     | limit for check program output (truncated after) |=
 512 B   |
 | sendExpectBuffer  | limit for send/expect protocol test              |=
 256 B   |
 | fileContentBuffer | limit for file content test (line)               |=
 512 B   |
 | httpContentBuffer | limit for HTTP content test (response body)      |=
 1 MB    |
 | networkTimeout    | timeout for network I/O                          |=
 5 s     |
 | programTimeout    | timeout for check program                        |=
 300 s   |
 | stopTimeout       | timeout for service stop                         |=
 30 s    |
 | startTimeout      | timeout for service start                        |=
 30 s    |
 | restartTimeout    | timeout for service restart                      |=
 30 s    |
 --------------------------------------------------------------------------=
--------</code></pre>

<h3 id=3D"GENERAL-SYNTAX">GENERAL SYNTAX</h3>

<p>Monit offers several if-tests you can use in a 'check' statement to test=
 various aspects of a service.</p>

<p>You can test both for a predefined value or for a range and take actions=
 if the value changes.</p>

<p>General syntax for testing a specific value or range:</p>

<pre><code> IF &lt;test&gt; THEN &lt;action&gt; [ELSE IF SUCCEEDED THEN &lt=
;action&gt;]</code></pre>

<p>The action is evaluated each time the &lt;TEST&gt; condition is true. Su=
ccess action is optional and executed only when the state changes from fail=
ure to success. If success action is not set, Monit will send a recovery al=
ert by default.</p>

<p>General syntax for a value change test:</p>

<pre><code> IF CHANGED &lt;test&gt; THEN &lt;action&gt;</code></pre>

<p>The action is executed each time the value changes. Monit will remember=
 the new value and will trigger event if the value change again.</p>

<h3 id=3D"ACTION">ACTION</h3>

<p>In each test you must select the action to be executed from this list:</=
p>

<ul>

<li><p><b>ALERT</b> sends the user an alert event on each state change.</p>

</li>
<li><p><b>RESTART</b> restarts the service <b>and</b> send an alert. Restar=
t is performed by calling the service's registered restart method or by fir=
st calling the stop method followed by the start method if restart is not=
 set.</p>

</li>
<li><p><b>START</b> starts the service by calling the service's registered=
 start method <b>and</b> send an alert.</p>

</li>
<li><p><b>STOP</b> stops the service by calling the service's registered st=
op method <b>and</b> send an alert. If Monit stops a service it will not be=
 checked by Monit anymore nor restarted again later. To reactivate monitori=
ng of the service again you must explicitly enable monitoring from the web=
 interface or from the console.</p>

</li>
<li><p><b>EXEC</b> can be used to execute an arbitrary program <b>and</b>=
 send an alert. If you choose this action you must state the program to be=
 executed and if the program requires arguments you must enclose the progra=
m and its arguments in a quoted string. You may optionally specify the uid=
 and gid the executed program should switch to upon start. The program is=
 executed only <i>once</i> if the test fails. You can enable execute repeti=
tion if the error persists for a given number of cycles. For instance:</p>

<pre><code> if failed &lt;test&gt; then exec "/usr/local/bin/sms.sh"
      as uid "nobody" and gid "nobody"
      repeat every 5 cycles</code></pre>

<p>Remember, if Monit is run by root, then all programs executed by Monit=
 will be started with superuser privileges unless the uid and gid extension=
 is used.</p>

</li>
<li><p><b>UNMONITOR</b> will disable monitoring of the service <b>and</b>=
 send an alert. The service will not be checked by Monit anymore nor restar=
ted again later. To reactivate monitoring of the service you must explicitl=
y enable monitoring from the web interface or from the console.</p>

</li>
</ul>

<h3 id=3D"FAULT-TOLERANCE">FAULT TOLERANCE</h3>

<p>By default an action is executed if it matches and the corresponding ser=
vice is set in an error state. However, you can require a test to fail more=
 than once before the error event is triggered and the service state is cha=
nged to failed. This is useful to avoid getting alerts on spurious errors,=
 which can happen, especially with network tests.</p>

<p>Syntax:</p>

<pre><code> FOR &lt;X&gt; CYCLES ...</code></pre>

<p>or:</p>

<pre><code> &lt;X&gt; [TIMES WITHIN] &lt;Y&gt; CYCLES ...</code></pre>

<p>The condition can be used both for failure and success action.</p>

<p>The first, simpler and recommended format requires <code>X</code> consec=
utive events before switching the state:</p>

<pre><code> if failed
    port 80
    for 3 cycles
 then alert</code></pre>

<p>The second format is more advanced and allows one to tolerate intermitte=
nt issues, but still catch excessive problems, where the service is flappin=
g between error and success states frequently.</p>

<p>For example if every second cycle fails (1-0-1-0-1-0-...), then "for 2=
 cycles" condition will never match, despite the service having problems.=
 The following statement will catch such a state:</p>

<pre><code> if failed
    port 80
    for 3 times within 5 cycles
 then alert</code></pre>

<p>Example which sets multiple error levels and actions:</p>

<pre><code> check filesystem rootfs with path /dev/hda1
  if space usage &gt; 80% for 5 times within 15 cycles then alert
  if space usage &gt; 90% for 5 cycles then exec '/try/to/free/the/space'</=
code></pre>

<p>Note: the maximum value for cycles is 64.</p>

<h2 id=3D"EXISTENCE-TESTS">EXISTENCE TESTS</h2>

<p>This test allows to trigger an action based on the monitored object exis=
tence. It is supported for <i>process</i>, <i>file</i>, <i>directory</i>,=
 <i>filesystem</i> and <i>fifo</i> services.</p>

<p>If no existence test is defined, the implicit non-existence test with re=
start action is activated, so for example if the process stops, Monit will=
 restart it.</p>

<p>There are two types of existence tests:</p>

<h3 id=3D"NON-EXIST">NON-EXIST</h3>

<p>This test will trigger an action if the object does not exist. It can be=
 used for example to make sure apache is running, data filesystem is mounte=
d, etc.</p>

<pre><code> IF [DOES] NOT EXIST THEN &lt;action&gt;</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example: Exec a script if a filesystem does NOT exist:</p>

<pre><code>  check filesystem disk1 with path /dev/sda1
       if does not exist then exec "/sbin/mount..."</code></pre>

<h3 id=3D"EXIST">EXIST</h3>

<p>This test is the inverse of the non-existence test: it will trigger an=
 action if the object DOES exist. It can be used for example to kill a proc=
ess which shouldn't be running.</p>

<pre><code> IF [DOES] EXIST THEN &lt;action&gt;</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example: kill a process that should not run:</p>

<pre><code> check process vmware matching "vmware"
       if exist then exec "/usr/bin/pkill -9 vmware"</code></pre>

<p>Example: Alert if a file exist which shouldn't</p>

<pre><code> check file x with path /some/path/x
       if exist then alert</code></pre>

<h2 id=3D"RESOURCE-TESTS">RESOURCE TESTS</h2>

<p>Monit can examine how much resources a service is using. This test can=
 only be used within a system or process service entry in the Monit control=
 file.</p>

<p>Depending on system or process characteristics, services can be stopped=
 or restarted and alerts can be generated. Thus it is possible to utilise=
 systems which are idle and to spare system under high load.</p>

<p>Syntax:</p>

<pre><code> IF &lt;resource&gt; &lt;operator&gt; &lt;value&gt; THEN &lt;act=
ion&gt;</code></pre>

<p><i>operator</i> is a choice of "&lt;", "&gt;", "!=3D", "=3D=3D" in C not=
ation, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less",=
 "equal", "notequal" in human readable form (if not specified, default is=
 EQUAL).</p>

<p><i>value</i> is either an integer or a real number.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p><i>resource</i> set depends on the service type:</p>

<h3 id=3D"System-resource-tests">System resource tests</h3>

<p><i>LOADAVG([1min|5min|15min])</i> refers to the system's load average.=
 The load average is the number of processes in the system run queue, avera=
ged over the specified time period. Example:</p>

<pre><code> if loadavg (1min) &gt; 90 for 15 cycles then alert
 if loadavg (5min) &gt; 80 for 10 cycles then alert
 if loadavg (15min) &gt; 70 for 8 cycles then alert</code></pre>

<p><i>CPU([user|system|wait])</i> is the percent of time the system spend=
 in user or kernel space and I/O. The user/system/wait modifier is optional=
, if not used, the total system cpu usage is tested. Example:</p>

<pre><code> if cpu usage &gt; 95% for 10 cycles then alert</code></pre>

<p><i>MEMORY</i> is the system memory usage [%] or absolute value [B, kB,=
 MB, GB]. Example:</p>

<pre><code> if memory usage &gt; 75% for 5 cycles then alert</code></pre>

<p><i>SWAP</i> is the swap usage of the system [%] or absolute [B, kB, MB,=
 GB]. Example:</p>

<pre><code> if swap usage &gt; 20% for 10 cycles then alert</code></pre>

<h3 id=3D"Process-resource-tests">Process resource tests</h3>

<p><i>CPU</i> is the CPU usage of the process itself [%]. Monit calculates=
 the CPU usage based on number of threads vs. available CPU cores. If the=
 process has one thread, the 100% CPU usage equals to 100% utilization of=
 one CPU core. If it has 2 threads, 100% CPU usage is reported when it uses=
 2 CPU cores on 100%, etc. If the process has more threads then the machine=
's available CPU cores, then the 100% CPU usage corresponds to utilization=
 of all available CPU cores. Example:</p>

<pre><code> if cpu &gt; 10% for 5 cycles then restart</code></pre>

<p><i>TOTAL CPU</i> is the total CPU usage of the process and its children=
 in (percent). You will want to use TOTAL CPU typically for services like=
 Apache web server where one master process forks child processes as worker=
s. Example:</p>

<pre><code> if total cpu &gt; 50% for 10 cycles then restart</code></pre>

<p><i>THREADS</i> is the number of processes' threads. Example:</p>

<pre><code> if threads &gt; 3 then alert</code></pre>

<p><i>CHILDREN</i> is the number of child processes of the process. Example=
:</p>

<pre><code> if children &gt; 10 then alert</code></pre>

<p><i>MEMORY</i> is the memory usage of the process itself, [%] or absolute=
 value [B, kB, MB, GB]. Example:</p>

<pre><code> if memory usage &gt; 8 MB then alert</code></pre>

<p><i>TOTAL MEMORY</i> is the memory usage of the process and its child pro=
cesses in either percent or as an amount [B, kB, MB, GB]. Example:</p>

<pre><code> if total memory usage &gt; 1% for 10 cycles then alert</code></=
pre>

<h2 id=3D"PROCESS-DISK-I-O-TEST">PROCESS DISK I/O TEST</h2>

<p>Monit can test process' filesystem read and write activity. This test ca=
n only be used in the context of a process service type. Monit will normall=
y need to run as the root user to access this metrics.</p>

<p>The OS usually supports the per-process I/O metrics by bytes or by opera=
tions.</p>

<p>Per-process I/O activity statistics by platform:</p>

<pre><code> -----------------------------------
 | Platform     | Operation | Byte |
 -----------------------------------
 | AIX          |     x     |      |
 | DragonFlyBSD |     x     |      |
 | FreeBSD      |     x     |      |
 | Linux        |           |  x   |
 | MacOS        |           |  x   |
 | NetBSD       |     x     |      |
 | OpenBSD      |     x     |      |
 | Solaris      |     x     |      |
 -----------------------------------</code></pre>

<h3 id=3D"Read:-bytes-per-second">Read: bytes per second</h3>

<p>Syntax:</p>

<pre><code> IF DISK READ [RATE] &lt;operator&gt; &lt;number&gt; &lt;unit&gt=
;/S THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB" or long alternatives "byte=
", "kilobyte", "megabyte", "gigabyte", "percent".</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check process p...
       if disk read &gt; 1 MB/s then alert</code></pre>

<h3 id=3D"Read:-operations-per-second">Read: operations per second</h3>

<p>Syntax:</p>

<pre><code> IF DISK READ &lt;operator&gt; &lt;number&gt; operations/S THEN=
 action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check process p...
       if disk read rate &gt; 500 operations/s then alert</code></pre>

<h3 id=3D"Write:-bytes-per-second">Write: bytes per second</h3>

<p>Syntax:</p>

<pre><code> IF DISK WRITE &lt;operator&gt; &lt;number&gt; &lt;unit&gt;/S TH=
EN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB" or long alternatives "byte=
", "kilobyte", "megabyte", "gigabyte", "percent".</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check process p...
       if disk write rate &gt; 1 MB/s then alert</code></pre>

<h3 id=3D"Write:-operations-per-second">Write: operations per second</h3>

<p>Syntax:</p>

<pre><code> IF DISK WRITE &lt;operator&gt; &lt;number&gt; operations/S THEN=
 action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check process p...
       if disk write rate &gt; 500 operations/s then alert</code></pre>

<h2 id=3D"FILE-CHECKSUM-TEST">FILE CHECKSUM TEST</h2>

<p>The checksum statement may only be used in a file service entry and can=
 be used to check the file's MD5 or SHA1 checksum.</p>

<p>Check specific checksum:</p>

<pre><code> IF FAILED [MD5|SHA1] CHECKSUM [EXPECT checksum] THEN action</co=
de></pre>

<p>Check any file changes:</p>

<pre><code> IF CHANGED [MD5|SHA1] CHECKSUM THEN action</code></pre>

<p>The choice of MD5 or SHA1 is optional. MD5 features a 128 bits checksum=
 (32 bytes hex encoded string) and SHA1 a 160 bits checksum (40 bytes hex=
 encoded string). If this option is omitted, Monit will try to guess the me=
thod from the EXPECT string or use MD5 as the default checksum.</p>

<p><code>expect</code> is optional and if used, specifies the md5 or sha1=
 string Monit should expect when testing a file's checksum. Monit will then=
 not compute an initial checksum for the file, but instead use the string=
 you submit. For example:</p>

<pre><code> if failed
    checksum expect 8f7f419955cefa0b33a2ba316cba3659
 then alert</code></pre>

<p>You can, for example, use the GNU utility <i>md5sum(1)</i> or <i>sha1sum=
(1)</i> to create a checksum string for a file and use this string in the=
 expect-statement.</p>

<p>Reloading a server if its configuration file was changed:</p>

<pre><code> check file apache_conf with path /etc/apache/httpd.conf
     if changed checksum then exec "/usr/bin/apachectl graceful"</code></pr=
e>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<h2 id=3D"TIMESTAMP-TEST">TIMESTAMP TEST</h2>

<p>The timestamp statement may only be used in a file, fifo or directory se=
rvice entry.</p>

<p>Relative timestamp syntax:</p>

<pre><code> IF &lt;ACCESS TIME | ATIME | MODIFICATION TIME | MTIME | CHANGE=
 TIME | CTIME | TIME[STAMP]&gt; &lt;operator&gt; &lt;value&gt; [unit] THEN=
 &lt;action&gt;</code></pre>

<p>Timestamp change syntax:</p>

<pre><code> IF CHANGED &lt;ACCESS TIME | ATIME | MODIFICATION TIME | MTIME=
 | CHANGE TIME | CTIME | TIME[STAMP]&gt; THEN action</code></pre>

<p>There are four timestamp test types:</p>

<dl>

<dt id=3D"ACCESS-ATIME">ACCESS (ATIME)</dt>
<dd>

<p>Test the timestamp which is updated whenever the object is accessed, for=
 example the file is read. Filesystem usually allows to disable <i>atime</i=
> updates using mount options, so this test will work only if the filesyste=
m performs atime updates.</p>

</dd>
<dt id=3D"CHANGE-CTIME">CHANGE (CTIME)</dt>
<dd>

<p>Test the timestamp which is updated whenever the object metadata such as=
 owner, group, permissions or hard link count are changed.</p>

</dd>
<dt id=3D"MODIFICATION-MTIME">MODIFICATION (MTIME)</dt>
<dd>

<p>Test the timestamp which is updated whenever the object content is modif=
ied. The file modification timestamp is updated whenever the file is trunca=
ted or written to. The directory modification timestamp is updated whenever=
 some files/subdirectories were added to the directory or removed from that=
 directory.</p>

</dd>
<dt id=3D"DEFAULT-LATEST-OF-CHANGE-AND-MODIFICATION-TIMES">DEFAULT (LATEST=
 OF CHANGE AND MODIFICATION TIMES)</dt>
<dd>

<p>If no specific timestamp type is set, the latest of change and modificat=
ion timestamps is checked. This test allows for simple testing of any objec=
t modification (data and metadata).</p>

</dd>
</dl>

<p><i>operator</i> is a choice of "&lt;", "&gt;", "!=3D", "=3D=3D" in C not=
ation, "GT", "LT", "EQ", "NE" in shell sh notation and "NEWER, "OLDER", "GR=
EATER", "LESS", "EQUAL", "NOTEQUAL" in human readable form (if not specifie=
d, default is EQUAL).</p>

<p><i>value</i> is a time watermark.</p>

<p><i>unit</i> is either "SECOND(S)", "MINUTE(S)", "HOUR(S)" or "DAY(S)".</=
p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>For example to reload apache if the configuration file changed:</p>

<pre><code> check file apache_conf with path /etc/apache/httpd.conf
   if changed timestamp then exec "/usr/bin/apachectl graceful"</code></pre>

<p>For example to test directory for file addition or removal:</p>

<pre><code> check directory bar path /foo/bar
   if changed timestamp then alert</code></pre>

<p>Example for sending alert if a log file is not updated for more than 1=
 hour:</p>

<pre><code>   if timestamp is older than 1 hour then alert</code></pre>

<h2 id=3D"FILE-SIZE-TEST">FILE SIZE TEST</h2>

<p>The size statement may only be used in a check file service entry. If sp=
ecified in the control file, Monit will compute a size for a file.</p>

<p>Testing specific size or range:</p>

<pre><code> IF SIZE [[operator] value [unit]] THEN action</code></pre>

<p>Testing size changes:</p>

<pre><code> IF CHANGED SIZE THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;", "&gt;", "!=3D", "=3D=3D" in C not=
ation, "GT", "LT", "EQ", "NE" in shell sh notation and "GREATER", "LESS",=
 "EQUAL", "NOTEQUAL" in human readable form (if not specified, default is=
 EQUAL).</p>

<p><i>value</i> is a size watermark.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB" or long alternatives "byte=
", "kilobyte", "megabyte", "gigabyte". If it is not specified, "byte" unit=
 is assumed by default.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>For example to send an alert if the file is too large:</p>

<pre><code> check file mydb with path /data/mydatabase.db
       if size &gt; 1 GB then alert</code></pre>

<h2 id=3D"FILE-CONTENT-TEST">FILE CONTENT TEST</h2>

<p>The content statement can be used to incrementally test the content of=
 a text file by using regular expressions.</p>

<p>Syntax:</p>

<pre><code> IF CONTENT &lt;operator&gt; &lt;regex|path&gt; THEN action</cod=
e></pre>

<p><i>operator</i> is either a "=3D" for match or "!=3D" for no-match.</p>

<p><i>regex</i> is a string containing the extended regular expression. See=
 also regex(7).</p>

<p><i>path</i> is an absolute path to a file containing extended regular ex=
pression on every line. See also regex(7).</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>On startup the read position is set to the end of the file and Monit con=
tinues to scan to the end of the file on each cycle.</p>

<p>If the file size should decrease or inode changed, the read position is=
 set to the start of the file.</p>

<p>Only lines ending with a newline character are inspected.</p>

<p>By default only the first 511 characters of a line are inspected. You ca=
n increase the limit using the <a href=3D"#LIMITS">set limits</a> statement=
.</p>

<pre><code> IGNORE CONTENT &lt;operator&gt; &lt;regex|path&gt;</code></pre>

<p>Lines matching an <i>IGNORE</i> are not inspected during later evaluatio=
ns. <i>IGNORE CONTENT</i> has always precedence over <i>IF CONTENT</i>.</p>

<p>All <i>IGNORE CONTENT</i> statements are evaluated first, in the order=
 of their appearance. Thereafter, all the <i>IF CONTENT</i> statements are=
 evaluated.</p>

<p>For example:</p>

<pre><code>  check file syslog with path /var/log/syslog
        ignore content =3D "monit"
        if content =3D "^mrcoffee" then alert</code></pre>

<h2 id=3D"FILESYSTEM-MOUNT-FLAGS-TEST">FILESYSTEM MOUNT FLAGS TEST</h2>

<p>Monit can test the filesystem mount flags for changes. This test is impl=
icit and Monit will send alert in case of failure by default.</p>

<p>This test is useful for detecting changes of filesystem flags such as if=
 the filesystem become read-only (on disk error) or mount flags were change=
d (such as nosuid).</p>

<p>The syntax for the fsflags statement is:</p>

<pre><code> IF CHANGED FSFLAGS THEN action</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem rootfs with path /
       if changed fsflags then exec "/my/script"</code></pre>

<h2 id=3D"SPACE-USAGE-TEST">SPACE USAGE TEST</h2>

<p>Monit can test a filesystem or a disk for space usage. This test may onl=
y be used in the context of a filesystem service type.</p>

<p>Filesystems usually have some space reserved for the root user (ca. 1-5%=
), so non-superusers cannot write to a nearly full filesystem. If you set=
 a limit for the filesystem which is used by non-root users you might want=
 to consider these reserved blocks when setting the limit. You can use Moni=
t itself to view the reserved blocks percentage by using the CLI status com=
mand or the HTTP interface for the given filesystem.</p>

<p>Syntax:</p>

<pre><code> IF SPACE operator value unit THEN action</code></pre>

<p>or:</p>

<pre><code> IF SPACE FREE operator value unit THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB", "%" or long alternatives=
 "byte", "kilobyte", "megabyte", "gigabyte", "percent".</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem rootfs with path /
       if space usage &gt; 90% then alert</code></pre>

<h2 id=3D"INODE-USAGE-TEST">INODE USAGE TEST</h2>

<p>Monit can test filesystem inode usage. This test may only be used in the=
 context of a filesystem service type.</p>

<p>Syntax:</p>

<pre><code> IF INODE(S) operator value [unit] THEN action</code></pre>

<p>or:</p>

<pre><code> IF INODE(S) FREE operator value [unit] THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is optional. If not specified, the value is an absolute coun=
t of inodes. You can use the "%" character or the longer alternative "perce=
nt" as a unit.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem rootfs with path /
       if inode usage &gt; 90% then alert</code></pre>

<h2 id=3D"DISK-I-O-TEST">DISK I/O TEST</h2>

<p>Monit can test a filesystem read and write activity. This test may only=
 be used in the context of a filesystem service type.</p>

<p>The available I/O metrics depends on the platform and filesystem. Some=
 platforms allows us to get I/O activity for specific partition, others jus=
t for the whole disk. Some allows us to get metrics for network filesystems=
, others just for block devices.</p>

<p>Platforms I/O metrics granularity and filesystem support in Monit:</p>

<pre><code> ---------------------------------------------------------------=
------------------------
 | Platform     | Granularity    | Supported filesystems                 =
     | TBD    |
 --------------------------------------------------------------------------=
-------------
 | AIX          | per-disk       | Disk io monitoring currently not support=
ed | JFSx   |
 | DragonFlyBSD | per-disk       | UFS                                   =
     | HAMMER |
 | FreeBSD      | per-disk       | UFS                                   =
     | ZFS    |
 | Linux        | per-filesystem | EXTx, XFS, BTRFS, ZFS, NFS, CIFS      =
     |        |
 | MacOS        | per-disk       | HFS                                   =
     |        |
 | NetBSD       | per-disk       | FFS                                   =
     | NFS    |
 | OpenBSD      | per-disk       | FFS                                   =
     |        |
 | Solaris      | per-filesystem | ZFS, UFS, NFS                         =
     |        |
 --------------------------------------------------------------------------=
-------------</code></pre>

<h3 id=3D"Read:-bytes-per-second1">Read: bytes per second</h3>

<p>Syntax:</p>

<pre><code> IF READ [RATE] &lt;operator&gt; &lt;number&gt; &lt;unit&gt;/S=
 THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB" or long alternatives "byte=
", "kilobyte", "megabyte", "gigabyte", "percent".</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem disk1...
       if read rate &gt; 1 MB/s then alert</code></pre>

<h3 id=3D"Read:-operations-per-second1">Read: operations per second</h3>

<p>Syntax:</p>

<pre><code> IF READ [RATE] &lt;operator&gt; &lt;number&gt; operations/S THE=
N action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem disk1...
       if read rate &gt; 500 operations/s then alert</code></pre>

<h3 id=3D"Write:-bytes-per-second1">Write: bytes per second</h3>

<p>Syntax:</p>

<pre><code> IF WRITE [RATE] &lt;operator&gt; &lt;number&gt; &lt;unit&gt;/S=
 THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB" or long alternatives "byte=
", "kilobyte", "megabyte", "gigabyte", "percent".</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem disk1...
       if write rate &gt; 1 MB/s then alert</code></pre>

<h3 id=3D"Write:-operations-per-second1">Write: operations per second</h3>

<p>Syntax:</p>

<pre><code> IF WRITE [RATE] &lt;operator&gt; &lt;number&gt; operations/S TH=
EN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check filesystem disk1...
       if write rate &gt; 500 operations/s then alert</code></pre>

<h3 id=3D"Service-time-per-operation">Service time per operation</h3>

<p>Service Time is the time taken to complete a read or a write operation.=
 This is a fairly important metric. If it grows, it means that the disk is=
 not able to handle the operations fast enough. Growth charts are available=
 in M/Monit.</p>

<p>Syntax:</p>

<pre><code> IF SERVICE TIME &lt;operator&gt; &lt;number&gt; &lt;unit&gt; TH=
EN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is "MS" (millisecond) or "S" (second)</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code>        if service time &gt; 10 milliseconds=20
                for 3 times within 5 cycles=20
        then alert</code></pre>

<h2 id=3D"PERMISSION-TEST">PERMISSION TEST</h2>

<p>Monit can test the permissions of file objects. This test may only be us=
ed in the context of a file, fifo, directory or filesystem service types.</=
p>

<p>Syntax for testing specific permissions:</p>

<pre><code> IF FAILED PERM(ISSION) octalnumber THEN action</code></pre>

<p>Syntax for testing any permission change:</p>

<pre><code> IF CHANGED PERM(ISSION) THEN action</code></pre>

<p><i>octalnumber</i> defines permissions for a file, a directory or a file=
system as four octal digits (0-7). Valid range is 0000 - 7777 (you can omit=
 the leading zeros, Monit will add the zeros to the left. For example, "640=
" is a valid value and matches "0640").</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check file shadow with path /etc/shadow
       if failed permission 0640 then alert</code></pre>

<h2 id=3D"UID-TEST">UID TEST</h2>

<p>Monit can monitor the owner user id (uid) of a file, fifo, directory or=
 owner and effective user of a process.</p>

<p>Syntax:</p>

<pre><code> IF FAILED [E]UID &lt;value&gt; THEN action</code></pre>

<p><i>value</i> defines a user id either in numeric or in string form.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check file shadow with path /etc/shadow
       if failed uid "root" then alert</code></pre>

<h2 id=3D"GID-TEST">GID TEST</h2>

<p>Monit can monitor the owner group id (gid) of a file, fifo, directory or=
 process.</p>

<p>Syntax:</p>

<pre><code> IF FAILED GID &lt;value&gt; THEN action</code></pre>

<p><i>value</i> defines a group id either in numeric or in string form.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check file shadow with path /etc/shadow
       if failed gid "shadow" then alert</code></pre>

<h2 id=3D"PID-TEST">PID TEST</h2>

<p>Monit can test the process' PID. This test is implicit and Monit will se=
nd an alert in case the PID changed outside of Monit's control.</p>

<p>Syntax:</p>

<pre><code> IF CHANGED PID THEN action</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>This test is useful to detect possible process restarts which has occurr=
ed in the timeframe between two Monit testing cycles.</p>

<p>For example if someone changes sshd configuration and did sshd restart=
 outside of Monit's control you will be notified that the process was repla=
ced by a new instance:</p>

<pre><code> check process sshd with pidfile /var/run/sshd.pid
       if changed pid then alert</code></pre>

<h2 id=3D"PPID-TEST">PPID TEST</h2>

<p>Monit can test the process' parent PID (PPID) for changes. This test is=
 implicit and Monit will send alert in the case that the PPID changed outsi=
de of Monit control.</p>

<p>The syntax for the ppid statement is:</p>

<pre><code> IF CHANGED PPID THEN action</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check process myproc with pidfile /var/run/myproc.pid
       if changed ppid then exec "/my/script"</code></pre>

<h2 id=3D"UPTIME-TEST">UPTIME TEST</h2>

<p>The uptime statement may only be used in a process and system service ty=
pe context.</p>

<p>Syntax:</p>

<pre><code> IF UPTIME [[operator] value [unit]] THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;", "&gt;", "!=3D", "=3D=3D" in C not=
ation, "GT", "LT", "EQ", "NE" in shell sh notation and "GREATER", "LESS",=
 "EQUAL", "NOTEQUAL" in human readable form (if not specified, default is=
 EQUAL).</p>

<p><i>value</i> is a uptime watermark.</p>

<p><i>unit</i> is either "SECOND", "MINUTE", "HOUR" or "DAY" (it is also po=
ssible to use "SECONDS", "MINUTES", "HOURS", or "DAYS").</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example of restarting the process every three days:</p>

<pre><code> check process myapp with pidfile /var/run/myapp.pid
    start program =3D "/etc/init.d/myapp start"
    stop program =3D "/etc/init.d/myapp stop"
    if uptime &gt; 3 days then restart</code></pre>

<h2 id=3D"PROGRAM-STATUS-TEST">PROGRAM STATUS TEST</h2>

<p>You can check the exit status of a program or a script. This test may on=
ly be used within a check program service entry in the Monit control file.<=
/p>

<p>Syntax for testing specific exit value:</p>

<pre><code> IF STATUS operator value THEN action</code></pre>

<p>Syntax for testing any exit value change:</p>

<pre><code> IF CHANGED STATUS THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Example:</p>

<pre><code> check program myscript with path /usr/local/bin/myscript.sh
       if status !=3D 0 then alert</code></pre>

<p>Sample script for the above example (/usr/local/bin/myscript.sh):</p>

<pre><code> #!/bin/bash
 echo test
 exit $?</code></pre>

<p>You can also send parameters with the program:</p>

<pre><code> check program list-files with path "/bin/ls -lrt /tmp/"
       if status !=3D 0 then alert</code></pre>

<p>Arguments to the program or script is a sequence of whitespace separated=
 strings. In the above example the strings '-lrt' and '/tmp/' are arguments=
 to the program '/bin/ls'. If arguments are used, it is recommended to use=
 quotes <b>"</b> to enclose the string, otherwise, if no arguments are used=
, quotes are not needed.</p>

<p>Notes: If the program is a script, the interpreter is required in the fi=
rst line. The program or script must also be executable.</p>

<p>If Monit is run as the super user, you can optionally run the program as=
 a different user and/or group. In this example we run the <i>ls</i> progra=
m as user www and as group staff:</p>

<pre><code> check program ls with path "/bin/ls /tmp" as uid "www"
          and gid "staff"
       if status !=3D 0 then alert</code></pre>

<p>Monit will execute the program periodically and if the exit status of th=
e program does not match the expected result, Monit can perform an action.=
 In the example above, Monit will raise an alert if the exit value is diffe=
rent from 0. By convention, 0 means the program exited normally.</p>

<p>Program checks are asynchronous. Meaning that Monit will not wait for th=
e program to exit, but instead, Monit will start the program in the backgro=
und and immediately continue checking the next service entry in <i>monitrc<=
/i>. At the next cycle, Monit will check if the program has finished and if=
 so, collect the program's exit status. If the status indicate a failure,=
 Monit will raise an alert message containing the program's error (stderr)=
 output, if any. If the program has not exited after the first cycle, Monit=
 will wait another cycle and so on. If the program is still running after=
 5 minutes, Monit will kill it and generate a program timeout event. It is=
 possible to override the default timeout (see the syntax below).</p>

<p>The asynchronous nature of the program check allows for non-blocking beh=
aviour in the current Monit design, but it comes with a side-effect: when=
 the program has finished executing and is waiting for Monit to collect the=
 result, it becomes a so-called "zombie" process. A zombie process does not=
 consume any system resources (only the PID remains in use) and it is under=
 Monit's control and the zombie process is removed from the system as soon=
 as Monit collects the exit status. This means that every "check program"=
 will be associated with either a running process or a temporary zombie. Th=
is unwanted zombie side-effect will be removed in a later release of Monit.=
</p>

<p>Multiple status tests can be used, for example:</p>

<pre><code> check program hwtest with path /usr/local/bin/hwtest.sh
       with timeout 500 seconds
       if status =3D 1 then alert
       if status =3D 3 for 5 cycles then exec "/usr/local/bin/emergency.sh"=
</code></pre>

<h2 id=3D"NETWORK-LINK-STATUS-TEST">NETWORK LINK STATUS TEST</h2>

<p>You can check the network link state. This test may only be used within=
 a check network service entry in the Monit control file.</p>

<p>Syntax:</p>

<pre><code> IF FAILED LINK THEN action</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>The test will fail if the link/interface is down or link errors were det=
ected.</p>

<p>Example:</p>

<pre><code> check network eth0 with interface eth0
       if failed link then alert</code></pre>

<p>In case a link failed you can add a start and stop program to automatica=
lly restart the interface which might help. (Substitute with the relevant=
 network commands for your system)</p>

<pre><code> check network eth0 with interface eth0
       start program =3D '/sbin/ipup eth0'
       stop program =3D '/sbin/ipdown eth0'
       if failed link then restart</code></pre>

<h2 id=3D"NETWORK-LINK-CAPACITY-TEST">NETWORK LINK CAPACITY TEST</h2>

<p>You can check the network link mode capacity for changes. This test may=
 only be used within a check network service entry in the Monit control fil=
e.</p>

<p>Syntax:</p>

<pre><code> IF CHANGED LINK [CAPACITY] THEN action</code></pre>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>The test will match if the link mode has changed (e.g. maximum speed dro=
pped) or if the duplex mode has changed.</p>

<p>NOTE: not all interface types allow for capacity monitoring. Pseudo inte=
rfaces such as loopback device or VMWare interfaces does not have a speed=
 attribute.</p>

<p>Example:</p>

<pre><code> check network eth0 with interface eth0
       if changed link capacity then alert</code></pre>

<h2 id=3D"NETWORK-SATURATION-TEST">NETWORK SATURATION TEST</h2>

<p>You can check the network link saturation. Monit then computes the link=
 utilisation based on the current transfer rate vs. link capacity. This tes=
t may only be used within a check network service entry in the Monit contro=
l file.</p>

<p>Syntax:</p>

<pre><code> IF SATURATION operator value% THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>NOTE: this test depends on the availability of the speed attribute and=
 not all interface types have this attribute. See the LINK SPEED test descr=
iption.</p>

<p>Example:</p>

<pre><code> check network eth0 with interface eth0
       if saturation &gt; 90% then alert</code></pre>

<h2 id=3D"NETWORK-BANDWIDTH-TEST">NETWORK BANDWIDTH TEST</h2>

<p>You can check a network link upload and download bandwidth usage, curren=
t transfer speed and total data transferred in the last 24 hours. This test=
 may only be used within a <i>check network</i> service entry in the Monit=
 control file.</p>

<p>Upload speed test syntax (per second):</p>

<pre><code> IF UPLOAD operator value unit/S THEN action</code></pre>

<p>Download speed test syntax (per second):</p>

<pre><code> IF DOWNLOAD operator value unit/S THEN action</code></pre>

<p>Total upload data test syntax:</p>

<pre><code> IF TOTAL UPLOADED operator value unit IN LAST number time-unit=
 THEN action</code></pre>

<p>Total download data test syntax:</p>

<pre><code> IF TOTAL DOWNLOADED operator value unit IN LAST number time-uni=
t THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>unit</i> is a choice of "B","KB","MB","GB" or long alternatives "byte=
", "kilobyte", "megabyte", "gigabyte".</p>

<p><i>time-unit</i> is a choice of "MINUTE(S)", "HOUR(S)", "DAY". NOTE: Mon=
it maintains a rolling count of total uploaded and downloaded bytes for the=
 last 24 hours only. The value of time-unit can therefor not specify a rang=
e wider than one day.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Examples:</p>

<pre><code> check network eth0 with interface eth0
       if upload &gt; 500 kB/s then alert
       if total downloaded &gt; 1 GB in last 2 hours then alert
       if total downloaded &gt; 10 GB in last day then alert</code></pre>

<h2 id=3D"NETWORK-PACKETS-TEST">NETWORK PACKETS TEST</h2>

<p>You can check the network link upload and download packets count, curren=
t transfer rate and total data transferred in last 24 hours. This test may=
 only be used within a check network service entry in the Monit control fil=
e.</p>

<p>Current upload bandwidth rate test syntax:</p>

<pre><code> IF UPLOAD operator value PACKETS/S THEN action</code></pre>

<p>Current download bandwidth rate test syntax:</p>

<pre><code> IF DOWNLOAD operator value PACKETS/S THEN action</code></pre>

<p>Total upload test syntax:</p>

<pre><code> IF TOTAL UPLOADED operator value PACKETS IN LAST number time-un=
it THEN action</code></pre>

<p>Total download test syntax:</p>

<pre><code> IF TOTAL DOWNLOADED operator value PACKETS IN LAST number time-=
unit THEN action</code></pre>

<p><i>operator</i> is a choice of "&lt;","&gt;","!=3D","=3D=3D" in c notati=
on, "gt", "lt", "eq", "ne" in shell sh notation and "greater", "less", "equ=
al", "notequal" in human readable form (if not specified, default is EQUAL)=
.</p>

<p><i>time-unit</i> is a choice of "MINUTE(S)", "HOUR(S)", "DAY". NOTE: Mon=
it keeps total upload/download statistics only for the last 24 hours. The=
 time-unit value cannot therefor span more than one day.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<p>Examples:</p>

<pre><code> check network eth0 with interface eth0
       if upload &gt; 1000 packets/s then alert
       if total uploaded &gt; 900000 packets in last hour then alert</code>=
</pre>

<h2 id=3D"NETWORK-PING-TEST">NETWORK PING TEST</h2>

<p>Monit can perform a network ping test by sending ICMP echo request datag=
ram packets to a host and wait for the reply. This test can only be used wi=
thin a check host statement. Monit must also run as the root user in order=
 to be able to perform the ping test (because the ping test must use raw so=
ckets which usually only the super user is allowed to).</p>

<p>Syntax:</p>

<pre><code>  IF FAILED PING[4|6]
     [COUNT number]
     [SIZE number]
     [TIMEOUT number SECONDS]
     [ADDRESS string]
  THEN action</code></pre>

<p>If a DNS host name was used in the <i>check host</i> statement and the=
 host name resolve to several addresses (either IPv4 or IPv6), Monit will=
 ping the first available address and continue with the next address until=
 one connection succeed or until there are no more addresses left to try.=
 You can force Monit to only ping IPv4 or IPv6 addresses by using the PING4=
 or the PING6 keyword instead of PING.</p>

<p>The <b>COUNT</b> parameter specifies how many consecutive ping requests=
 will be sent to the host in one cycle at maximum. The default value is 3.<=
/p>

<p>The <b>SIZE</b> parameter specifies the ping request data size. Default=
 is 64 bytes.</p>

<p>If no reply arrive within <b>TIMEOUT</b> seconds, Monit reports an error=
. If at least one reply was received, the ping test is considered a success=
.</p>

<p>The <b>ADDRESS</b> parameter specifies source IP address.</p>

<p>Monit will, by default, send up to <i>three</i> ping request packets in=
 one cycle to prevent false alarm (i.e. up to 66% packet loss is tolerated)=
. You can set the <b>COUNT</b> option to a value between 1 and 20 to send=
 more or fewer packets. If you require 100% ping success, set the count to=
 1 (i.e. just one request will be sent, and if the packet was lost an error=
 will be reported).</p>

<p>Note that many ISPs have started to filter out ping or ICMP packets now,=
 in which case there will be no reply from the host.</p>

<p>If a ping test is used in a check host entry, this test is run first and=
 if the test should fail, we assume that the connection to the host is down=
 and Monit will <i>not</i> continue with any subsequent port tests.</p>

<p>Example:</p>

<pre><code> check host mmonit.com with address mmonit.com
       if failed ping then alert  # IPv4 or IPv6

 check host mmonit.com with address 62.109.39.247
       if failed ping then alert # Address is IPv4 so IPv4 is preferred</co=
de></pre>

<p>or test that the system is explicit accessible via IPv4 and IPv6:</p>

<pre><code> check host mmonit.com with address mmonit.com
       if failed ping4 then alert  # IPv4 only
       if failed ping6 then alert  # IPv6 only</code></pre>

<p>or with all parameters; Send five 128 byte pings to mmonit.com and wait=
 for up to 10 seconds for a reply</p>

<pre><code>  check host mmonit.com with address mmonit.com
        if failed ping count 5 size 128 with timeout 10 seconds then alert<=
/code></pre>

<h2 id=3D"CONNECTION-TESTS">CONNECTION TESTS</h2>

<p>Monit can perform connection testing via network ports or via Unix socke=
ts. A connection test may only be used within a process or host service typ=
e context.</p>

<p>If a service listens on one or more sockets, Monit can connect to the po=
rt (using TCP or UDP) and verify that the service will accept a connection=
 and that it is possible to write and read from the socket. If a connection=
 is not accepted or if there is a problem with socket I/O, Monit will execu=
te a specified action.</p>

<p>TCP/UDP port test syntax:</p>

<pre><code> IF FAILED
    [HOST string]
    &lt;PORT number&gt;
    [ADDRESS string]
    [IPV4 | IPV6]
    [TYPE &lt;TCP|UDP&gt;]
    [&lt;SSL|TLS&gt; [with options {...}]
    [CERTIFICATE CHECKSUM [MD5|SHA1] string]
    [CERTIFICATE VALID for number DAYS]
    [PROTOCOL protocol | &lt;SEND|EXPECT&gt; "string",...]
    [TIMEOUT number SECONDS]
    [RETRY number]
 THEN action</code></pre>

<p>Unix socket test syntax:</p>

<pre><code> IF FAILED
    &lt;UNIXSOCKET path&gt;
    [TYPE &lt;TCP|UDP&gt;]
    [PROTOCOL protocol | &lt;SEND|EXPECT&gt; "string",...]
    [TIMEOUT number SECONDS]
    [RETRY number]
 THEN action</code></pre>

<p>Examples:</p>

<pre><code> if failed port 80 then alert

 if failed port 53 type udp protocol dns then alert

 if failed unixsocket /var/run/sophie then alert</code></pre>

<p>Options:</p>

<p><i>HOST hostname</i>. Optionally specify the host to connect to. If the=
 host is not given then localhost is assumed if this test is used inside a=
 process entry. If this test is used inside a remote host entry then the en=
try's remote host is assumed.</p>

<p><i>PORT number</i>. The port number to connect to</p>

<p><i>UNIXSOCKET path</i>. Specifies the path to a Unix socket (local machi=
ne only).</p>

<p><i>ADDRESS string</i>. The source IP address to use.</p>

<p><i>IPV4 | IPV6 </i>. Optionally specify the IP version Monit should use=
 when trying to connect to the port. If not used, Monit will try to connect=
 to the first available address (IPv4 or IPv6). If multiple addresses are=
 available and connection to one address failed, Monit will try the next ad=
dress and so on until a connection succeed or until there are no more addre=
sses left to try.</p>

<p><i>TYPE &lt;TCP | UDP</i>]&gt;. Optionally specify the socket type Monit=
 should use when trying to connect to the port. The different socket types=
 are: TCP or UDP, where TCP is a regular stream based socket, UDP, a datagr=
am socket. The default socket type is TCP.</p>

<p><i>[SSL | TLS] [with options {...}]</i>. Set SSL/TLS <a href=3D"#SSL-OPT=
IONS">options</a> and override global/default SSL options. You can set the=
 SSL/TLS version to use, whether to verify certificates, trust self-signed=
 certificates or set the SSL client certificates database-file for client=
 certificate authentication.</p>

<p><i>CERTIFICATE CHECKSUM [MD5|SHA1] hash</i>. Verify the SSL server certi=
ficate by checking its checksum. You can use either MD5 or SHA1 checksum (i=
f you don't specify the type, Monit will determine the digest based on the=
 hash length). You can use the <i>openssl</i> command line tool to get the=
 checksum value for your certificate, which you can then use in Monit's con=
trol file:</p>

<pre><code> openssl x509 -fingerprint -sha1 -in server.crt | head -1 | cut=
 -f2 -d'=3D'</code></pre>

<p>Example:</p>

<pre><code> if failed
     port 443
     protocol https
     and certificate checksum =3D "1ED948A6F4258ACAB964227EF4EB19FCC453B0F8"
 then alert</code></pre>

<p><i>CERTIFICATE VALID for number DAYS</i>. Send an alert if the certifica=
te will expire in the given number of days. This test is pretty useful to=
 get a notification when it is time to renew your SSL certificate.</p>

<p>Example:</p>

<pre><code>  if failed
      port 443
      protocol https
      and certificate valid &gt; 30 days
  then alert</code></pre>

<p><i>PROTOCOL protocol</i>. Optionally specify the protocol Monit should=
 speak when a connection is established. At the moment Monit knows how to=
 speak: <i>APACHE-STATUS</i> <i>DNS</i> <i>DWP</i> <i>FAIL2BAN</i> <i>FTP</=
i> <i>GPS</i> <i>HTTP</i> <i>HTTPS</i> <i>IMAP</i> <i>IMAPS</i> <i>CLAMAV</=
i> <i>LDAP2</i> <i>LDAP3</i> <i>LMTP</i> <i>MEMCACHE</i> <i>MONGODB</i> <i>=
MYSQL</i> <i>NNTP</i> <i>NTP3</i> <i>PGSQL</i> <i>POP</i> <i>POPS</i> <i>PO=
STFIX-POLICY</i> <i>RADIUS</i> <i>RDATE</i> <i>REDIS</i> <i>RSYNC</i> <i>SI=
EVE</i> <i>SIP</i> <i>SMTP</i> <i>SMTPS</i> <i>SPAMASSASSIN</i> <i>SSH</i>=
 <i>TNS</i> <i>WEBSOCKET</i></p>

<p>If the target server's protocol is not found in this list, simply do not=
 specify the protocol and Monit will use a default connection test.</p>

<p><i>TIMEOUT number SECONDS</i>. Optionally specifies the connect and read=
 timeout for the connection. If Monit cannot connect to the server within=
 this time it will assume that the connection failed and execute the specif=
ied action. The default connect timeout is 5 seconds.</p>

<p><i>RETRY number</i>. Optionally specifies the number of consecutive retr=
ies within the same testing cycle in the case that the connection failed.=
 The default is fail on first error.</p>

<p><i>action</i> is a choice of "ALERT", "RESTART", "START", "STOP", "EXEC"=
 or "UNMONITOR".</p>

<h3 id=3D"Specific-protocol-test-options">Specific protocol test options</h=
3>

<h4 id=3D"GENERIC-SEND-EXPECT">GENERIC (SEND/EXPECT)</h4>

<p>If Monit does not support the protocol spoken by the server, you can wri=
te your own protocol-test using <i>send</i> and <i>expect</i> strings. The=
 <i>SEND</i> statement sends a string to the server port and the <i>EXPECT<=
/i> statement compares a string read from the server with the string given=
 in the expect statement.</p>

<p>Syntax:</p>

<pre><code> [&lt;SEND|EXPECT&gt; "string"]+</code></pre>

<p>Monit will send a string as it is, and you <b>must</b> remember to inclu=
de CR and LF in the string sent to the server if the protocol expects such=
 characters to terminate a string (most text based protocols used over Inte=
rnet do).</p>

<p>Monit will by default read up to 255 bytes from the server and use this=
 string when comparing the EXPECT string. You can override the default valu=
e using the <a href=3D"#LIMITS">set limits</a> statement.</p>

<p>You can use non-printable characters in a SEND string if needed. Use the=
 hex notation, \0xHEXHEX to send any char in the range \0x00-\0xFF, that is=
, 0-255 in decimal. For example, to test a Quake 3 server:</p>

<pre><code> send "\0xFF\0xFF\0xFF\0xFFgetstatus"
 expect "sv_floodProtect|sv_maxPing"</code></pre>

<p>If your system supports POSIX regular expressions, you can use regular=
 expressions in the EXPECT string, see regex(7) to learn more about the typ=
es of regular expressions you can use in an expect string.</p>

<p>Since both regex and string compare operates on a zero terminated string=
, you cannot test for '\0' in an EXPECT buffer since this character marks=
 the end of the buffer. However, we escape '\0' in the expect buffer as "\0=
" which you can test for. That is, '\' followed by the ascii value for 0.=
 For instance, here is how to test for an expect string that starts with ze=
ro followed by any number of characters.</p>

<pre><code> expect "^[\\]0.*"</code></pre>

<p>Here is a simple SMTP protocol example:</p>

<pre><code> if failed
    port 25 and
    expect "^220.*"
    send   "HELO localhost.localdomain\r\n"
    expect "^250.*"
    send   "QUIT\r\n"
 then alert</code></pre>

<p>SEND/EXPECT can be used with any socket type, such as TCP sockets, UNIX=
 sockets and UDP sockets.</p>

<h4 id=3D"HTTP">HTTP</h4>

<p>Syntax:</p>

<pre><code> PROTO(COL) HTTP
     [USERNAME "string"]
     [PASSWORD "string"]
     [REQUEST "string"]
     [METHOD &lt;GET|HEAD&gt;]
     [STATUS operator number]
     [CHECKSUM checksum]
     [HTTP HEADERS list of headers]
     [CONTENT &lt; "=3D" | "!=3D" &gt; STRING]</code></pre>

<p><i>USERNAME</i> is an optional username for Basic authentication</p>

<p><i>PASSWORD</i> is an optional password for Basic authentication</p>

<p><i>REQUEST</i> option can set an URL string specifying a document on the=
 HTTP server. If the request statement isn't specified, the default "/" pag=
e will be requested.</p>

<p>For example:</p>

<pre><code> if failed
    port 80
    protocol http
    request "/data/show?a=3Db&amp;c=3Dd"
 then restart</code></pre>

<p><i>METHOD</i> set the HTTP request method. If not specified, Monit prefe=
rs the HTTP HEAD request method to save bandwidth, unless a response conten=
t or response checksum is tested. As some webservers may not support the HE=
AD method, one may want to set the method explicitly.</p>

<p><i>STATUS</i> option can be used to explicitly test the HTTP status code=
 returned by the HTTP server. If not used, the HTTP protocol test will fail=
 if the status code returned is greater than or equal to 400. You can overr=
ide this behaviour by using the <i>status</i> qualifier.</p>

<p>For example to test that a page does <b>not</b> exist (the HTTP server=
 should return 404 in this case):</p>

<pre><code>  if failed
     port 80
     protocol http
     request "/non/existent.php"
     status =3D 404
  then alert</code></pre>

<p><i>CHECKSUM</i> You can test the checksum of documents returned by a HTT=
P server. Either MD5 or SHA1 hash can be used. Monit will <b>not</b> test=
 the checksum for a document if the server does not set the HTTP <i>Content=
-Length</i> header. A HTTP server should set this header when it server a=
 static document (i.e. a file). There are no limitation on the document siz=
e, but keep in mind that Monit will use time to download the document over=
 the network to compute the checksum.</p>

<p>Example:</p>

<pre><code> if failed
    port 80
    protocol http
    request "/page.html"
    checksum 8f7f419955cefa0b33a2ba316cba3659
 then alert</code></pre>

<p><i>HTTP HEADERS</i> can be used to send a list of HTTP headers when usin=
g the HTTP protocol test. For instance, the host header. If the host header=
 is not set, Monit will use the hostname or IP-address of the host as speci=
fied in the check host statement. Specifying a host header is useful if you=
 want to connect to and test a name-based virtual host. The syntax for sett=
ing HTTP headers is</p>

<pre><code>  http headers [name:value, name:value,..]</code></pre>

<p>where each name:value pair is separated with ','. If you need to use ':'=
 in the value string, for instance to set port number for a host header, yo=
u must enclose the value in quotes. For example,</p>

<pre><code>  http headers [Host: "mmonit.com:443"]</code></pre>

<p>In a check host context, using this statement might look like</p>

<pre><code>  check host mmonit.com with address mmonit.com
    if failed
       port 80 protocol http
       with http headers [Host: mmonit.com, Cache-Control: no-cache,
         Cookie: csrftoken=3Dnj1bI3CnMCaiNv4beqo8ZaCfAQQvpgLH]
       and request /monit/ with content =3D "Monit [0-9.]+"
    then alert</code></pre>

<p>Setting HTTP headers is associated with the HTTP protocol test and must=
 come before <i>request</i> as in the example above.</p>

<p>The <i>CONTENT</i> option sets the pattern which is expected in the data=
 returned by the server. If the pattern doesn't match, the test fails. In=
 the example above, if the server does not return a page with the name Moni=
t followed by a version number the test will fail.</p>

<p>By default, at maximum 1MB of content is inspected. You can increase thi=
s limit using the <a href=3D"#LIMITS">set limits</a> statement.</p>

<p>For example:</p>

<pre><code>  if failed
     port 80
     protocol http
     content =3D "foobar [0-9.]+"
  then alert</code></pre>

<h4 id=3D"APACHE-STATUS">APACHE-STATUS</h4>

<p>The <i>APACHE-STATUS</i> test allows one to check server performance by=
 examination of the status page generated by Apache's mod_status, which is=
 expected to be at its default address of http://www.example.com/server-sta=
tus.</p>

<p>Syntax:</p>

<pre><code> PROTOCOL APACHE-STATUS [PATH &lt;path&gt;] [USERNAME &lt;string=
&gt;] [PASSWORD &lt;string&gt;] [&lt;property&gt; &lt;operator&gt; &lt;numb=
er&gt;]+</code></pre>

<p><i>PATH</i> is an optional path to apache status ("/server-status" by de=
fault)</p>

<p><i>USERNAME</i> is an optional username for Basic authentication</p>

<p><i>PASSWORD</i> is an optional password for Basic authentication</p>

<p><i>property</i> is acronym for child status:</p>

<pre><code> (1) logging (loglimit)
 (2) closing connections (closelimit)
 (3) performing DNS lookups (dnslimit)
 (4) in keepalive with a client (keepalivelimit)
 (5) replying to a client (replylimit)
 (6) receiving a request (requestlimit)
 (7) initialising (startlimit)
 (8) waiting for incoming connections (waitlimit)
 (9) gracefully closing down (gracefullimit)
 (10) performing cleanup procedures (cleanuplimit)</code></pre>

<p><i>operator</i> is one of "&lt;", "=3D", "&gt;".</p>

<p><i>number</i> is percentile numeric limit.</p>

<p>Each of these limits can be compared against a value relative to the tot=
al number of active Apache child processes.</p>

<p>You can combine all of these tests into one expression or you can choose=
 to test a certain limit only. If you combine the limits you must connect=
 them together using the OR keyword.</p>

<p>Example:</p>

<pre><code> if failed port 80 protocol apache-status
        loglimit &gt; 10% or
        dnslimit &gt; 50% or
        waitlimit &lt; 20%
 then alert</code></pre>

<h4 id=3D"MYSQL">MYSQL</h4>

<p>Syntax:</p>

<pre><code> PROTOCOL MYSQL [USERNAME string PASSWORD string]</code></pre>

<p><i>USERNAME</i> MySQL username (maximum 16 characters).</p>

<p><i>PASSWORD</i> MySQL password (special characters can be used, but for=
 non-alphanumerics the password has to be quoted).</p>

<p>Username and password (credentials) are <b>optional</b> and if not set,=
 Monit will perform the test using anonymous login. This can cause an authe=
ntication error to be logged in your MySQL log, depending on your MySQL con=
figuration.</p>

<p>If credentials are set, Monit will login and perform a MySQL ping test.=
 Monit does not require any database privileges, it just needs the database=
 user. You might want to create standalone user for Monit to use when testi=
ng, for example:</p>

<pre><code> CREATE USER 'monit'@'host_from_which_monit_performs_testing' ID=
ENTIFIED BY 'mysecretpassword';
 FLUSH PRIVILEGES;</code></pre>

<p>Example:</p>

<pre><code> check process mysql with pidfile /var/run/mysqld/mysqld.pid
     start program =3D "/sbin/start mysql"
     stop program =3D "/sbin/stop mysql"
     if failed
        port 3306
        protocol mysql username "foo" password "bar"
     then alert</code></pre>

<p>or with unix-socket and OS X start/stop commands</p>

<pre><code> check process mysql with pidfile /var/run/mysqld/mysqld.pid
     start program =3D "/usr/local/mysql/support-files/mysql.server start"
     stop program =3D "/usr/local/mysql/support-files/mysql.server stop"
     if failed
        unixsocket /tmp/mysql.sock
        protocol mysql username "foo" password "bar"
     then alert</code></pre>

<h4 id=3D"RADIUS">RADIUS</h4>

<p>Syntax:</p>

<pre><code> PROTOCOL RADIUS [SECRET string]</code></pre>

<p><i>SECRET</i> you may specify an alternative secret, default is "testing=
123".</p>

<p>For example:</p>

<pre><code> check process radiusd with pidfile /var/run/radiusd.pid
       start program =3D "/etc/init.d/freeradius start"
       stop program =3D "/etc/init.d/freeradius stop"
       if failed
          host 127.0.0.1 port 1812 type udp protocol radius
          secret pingpong
       then alert</code></pre>

<h4 id=3D"SIP">SIP</h4>

<p>The SIP protocol is used by communication platform servers such as Aster=
isk and FreeSWITCH.</p>

<p>Syntax:</p>

<pre><code> PROTOCOL SIP [TARGET valid@uri] [MAXFORWARD n]</code></pre>

<p><i>TARGET</i> you may specify an alternative recipient for the message,=
 by adding a valid sip uri after this keyword.</p>

<p><i>MAXFORWARD</i> Limit the number of proxies or gateways that can forwa=
rd the request to the next server. It's value is an integer in the range 0-=
255, set by default to 70. If max-forward =3D 0, the next server may respon=
d 200 OK (test succeeded) or send a 483 Too Many Hops (test failed)</p>

<p>For example:</p>

<pre><code> check host openser_all with address 127.0.0.1
   if failed
      port 5060 type udp protocol sip
      with target "localhost:5060" and maxforward 6
   then alert</code></pre>

<h4 id=3D"SMTP">SMTP</h4>

<p>Syntax:</p>

<pre><code> PROTOCOL SMTP[S] [USERNAME string PASSWORD string]</code></pre>

<p><i>USERNAME</i> SMTP username.</p>

<p><i>PASSWORD</i> SMTP password (special characters can be used, but for=
 non-alphanumerics the password has to be quoted).</p>

<p>Credentials are <i>optional</i> and when used will perform authenticatio=
n during testing so you can test that authentication also works. We recomme=
nd using <i>smtps</i> if authentication is to be used to encrypt the commun=
ication. If no credentials are set, Monit will just perform a basic protoco=
l test.</p>

<p>Example:</p>

<pre><code> check process postfix with pidfile /var/spool/postfix/pid/maste=
r.pid
     start program =3D "/etc/init.d/postfix start"
     stop  program =3D "/etc/init.d/postfix stop"
     if failed
        port 25
        protocol smtp
     then alert</code></pre>

<p>Example using authentication and STARTTLS/SMTPS:</p>

<pre><code> check process postfix with pidfile /var/spool/postfix/pid/maste=
r.pid
     start program =3D "/etc/init.d/postfix start"
     stop  program =3D "/etc/init.d/postfix stop"
     if failed
        port 25
        protocol smtps
        username "foo"
        password "bar"
     then alert</code></pre>

<h4 id=3D"WEBSOCKET">WEBSOCKET</h4>

<p>Syntax:</p>

<pre><code> PROTOCOL WEBSOCKET
         [REQUEST string]
         [HOST string]
         [ORIGIN string]
         [VERSION number]</code></pre>

<p><i>HOST</i> you may specify an alternative Host header</p>

<p><i>REQUEST</i> you may specify an alternative request, default is "/"</p>

<p><i>ORIGIN</i> you may specify an alternative origin, default is "http://=
www.mmonit.com"</p>

<p><i>VERSION</i> you may specify an alternative version, default is "0"</p>

<p>For example:</p>

<pre><code> check host websocket.org with address "echo.websocket.org"
       if failed
          port 80 protocol websocket
          host "echo.websocket.org"
          request "/"
          origin 'http://websocket.com'
          version 13
       then alert</code></pre>

<h1 id=3D"MANAGE-YOUR-MONIT-INSTANCES">MANAGE YOUR MONIT INSTANCES</h1>

<p><a href=3D"https://mmonit.com/">M/Monit</a> expands on Monit's capabilit=
ies and provides monitoring and management of all your Monit enabled hosts.=
</p>

<p>M/Monit uses Monit as an agent. With regular intervals, Monit sends a st=
atus message to M/Monit with a snapshot of the host it is running on.</p>

<p>M/Monit presents the collected data in charts and event logs and give yo=
u the option to view key performance data of all your hosts in a modern, cl=
ean and well designed user interface which also works on mobile devices.</p>

<p>From M/Monit, you can also start, stop and restart services on your host=
s running Monit.</p>

<p>To send data to M/Monit, add the following statement to your Monit contr=
ol file:</p>

<pre><code>  SET MMONIT &lt;url&gt;
        [TIMEOUT &lt;number&gt; SECONDS]
        [REGISTER WITHOUT CREDENTIALS]</code></pre>

<p>Example:</p>

<pre><code> set mmonit https://monit:monit@192.168.1.10:8443/collector</cod=
e></pre>

<p>Monit will register itself in M/Monit and will start sending status and=
 event messages to M/Monit. We recommend using <i>https</i> as in the examp=
le above to ensure that the communication between Monit and M/Monit is secu=
re.</p>

<p>The password should be URL encoded if it contains URL-significant charac=
ters like ":", "?", "@".</p>

<p>The default timeout is 5 seconds, you can customise the timeout using th=
e <i>TIMEOUT</i> option.</p>

<p>When Monit registers itself in M/Monit it sends credentials that can be=
 used to perform service actions from M/Monit. You can disable sending cred=
entials by using <i>REGISTER WITHOUT CREDENTIALS</i> and instead manually=
 add credentials in M/Monit.</p>

<h1 id=3D"CONFIGURATION-EXAMPLES">CONFIGURATION EXAMPLES</h1>

<p>The simplest form is just the check statement. In this example we check=
 to see if our web server is running and raise an alert if not:</p>

<pre><code> check process nginx with pidfile /var/run/nginx.pid</code></pre>

<p>To have Monit start the server if it's not running, add a start statemen=
t:</p>

<pre><code> check process nginx with pidfile /var/run/nginx.pid
       start program =3D "/etc/init.d/nginx start"</code></pre>

<p>Here's a more advanced example for monitoring an apache web-server liste=
ning on the default port number for HTTP and HTTPS. In this example Monit=
 will restart apache if it's not accepting connections at the port numbers.=
 The method Monit use for restart is to first execute the stop-program, the=
n wait (up to 30s) for the process to stop and then execute the start-progr=
am and wait (30s) for it to start. The length of start or stop wait can be=
 overridden using the 'timeout' option. If Monit was unable to stop or star=
t the service a failed alert message will be sent if you have requested ale=
rt messages to be sent.</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start program =3D "/etc/init.d/httpd start" with timeout 60 seconds
       stop program  =3D "/etc/init.d/httpd stop"
       if failed port 80 for 2 cycles then restart
       if failed port 443 for 2 cycles then restart</code></pre>

<p>This example demonstrate how you can run a program as a specified user=
 (uid) and with a specified group (gid). Many daemon programs can do the ui=
d and gid switch by themselves, but for those programs that does not (e.g.=
 Java programs), monit's ability to start a program as a certain user can=
 be very useful. In this example we start the Tomcat Java Servlet Engine as=
 the standard <i>nobody</i> user and group. Please note that Monit can only=
 switch uid and gid for the program if the super-user is running Monit, oth=
erwise Monit will simply ignore the request to change uid and gid.</p>

<pre><code> check process tomcat with pidfile /var/run/tomcat.pid
       start program =3D "/etc/init.d/tomcat start"
             as uid "nobody" and gid "nobody"
       stop program  =3D "/etc/init.d/tomcat stop"
             # You can also use id numbers instead and write:
             as uid 99 and with gid 99
       if failed port 8080 then alert</code></pre>

<p>In this example we use udp for connection testing to check if the name-s=
erver is running:</p>

<pre><code> check process named with pidfile /var/run/named.pid
       start program =3D "/etc/init.d/named start"
       stop program  =3D "/etc/init.d/named stop"
       if failed port 53 use type udp protocol dns then restart</code></pre>

<p>The following example illustrates how to check if the service 'sophie'=
 is answering connections on its Unix domain socket:</p>

<pre><code> check process sophie with pidfile /var/run/sophie.pid
       start program =3D "/etc/init.d/sophie start"
       stop  program =3D "/etc/init.d/sophie stop"
       if failed unix /var/run/sophie then restart</code></pre>

<p>In this example we check an apache web-server running on localhost which=
 answers for several IP-based virtual hosts or vhosts, hence the host state=
ment before port:</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start "/etc/init.d/httpd start"
       stop  "/etc/init.d/httpd stop"
       if failed host www.sol.no port 80 then alert
       if failed host shop.sol.no port 443 then alert
       if failed host chat.sol.no port 80 then alert</code></pre>

<p>To make sure that Monit is communicating with a HTTP server a protocol=
 test can be added:</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start "/etc/init.d/httpd start"
       stop  "/etc/init.d/httpd stop"
       if failed
          host www.sol.no port 80 protocol http
       then alert</code></pre>

<p>This example demonstrate a different way to check a web-server using the=
 send/expect mechanism:</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start "/etc/init.d/httpd start"
       stop  "/etc/init.d/httpd stop"
       if failed
          host www.sol.no port 80 and
          send "GET / HTTP/1.1\r\nHost: www.sol.no\r\n\r\n"
          expect "HTTP/[0-9\.]{3} 200.*"
       then alert</code></pre>

<p>Here we ping a remote host to check if it is up and if not, send an aler=
t:</p>

<pre><code> check host www.tildeslash.com with address www.tildeslash.com
       if failed ping then alert</code></pre>

<p>In the following example we ask Monit to compute and verify the checksum=
 for the underlying apache binary used by the start and stop programs. If=
 the checksum test should fail, monitoring will be disabled to prevent poss=
ibly restarting a compromised binary:</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start program =3D "/etc/init.d/httpd start"
       stop program  =3D "/etc/init.d/httpd stop"
       if failed host www.tildeslash.com port 80 then restart
       depends on apache_bin

 check file apache_bin with path /usr/local/apache/bin/httpd
       if failed checksum then unmonitor</code></pre>

<p>In this example we ask Monit to test a document's checksum on a remote=
 server. If the checksum was changed we send an alert:</p>

<pre><code> check host mmonit.com with address mmonit.com
       if failed
          port 80 protocol http and
          request "/monit/dist/monit-5.7.tar.gz"
          with checksum f9d26b8393736b5dfad837bb13780786
       then alert</code></pre>

<p>Here are a couple of tests for some popular communication servers, using=
 the SIP protocol. First we test a FreeSWITCH server and then an Asterisk=
 server</p>

<pre><code> check process freeswitch
    with pidfile /usr/local/freeswitch/log/freeswitch.pid
  start program =3D "/usr/local/freeswitch/bin/freeswitch -nc -hp"
  stop program =3D "/usr/local/freeswitch/bin/freeswitch -stop"
  if total memory &gt; 1000.0 MB for 5 cycles then alert
  if total memory &gt; 1500.0 MB for 5 cycles then alert
  if total memory &gt; 2000.0 MB for 5 cycles then restart
  if cpu &gt; 60% for 5 cycles then alert
  if failed
     port 5060 type udp protocol SIP
     target me@foo.bar and maxforward 10
  then restart

 check process asterisk
   with pidfile /var/run/asterisk/asterisk.pid
   start program =3D "/usr/sbin/asterisk"
   stop program =3D "/usr/sbin/asterisk -r -x 'shutdown now'"
   if total memory &gt; 1000.0 MB for 5 cycles then alert
   if total memory &gt; 1500.0 MB for 5 cycles then alert
   if total memory &gt; 2000.0 MB for 5 cycles then restart
   if cpu &gt; 60% for 5 cycles then alert
   if failed
      port 5060 type udp protocol SIP
      and target me@foo.bar maxforward 10
   then restart</code></pre>

<p>Some servers are slow starters, like for example Java based Application=
 Servers. If we want to keep the poll-cycle low (i.e. &lt; 60 seconds) but=
 allow some services to take its time to start, the <b>every</b> statement=
 is handy:</p>

<pre><code> check process dynamo with pidfile /etc/dynamo.pid every 2 cycles
       start program =3D "/etc/init.d/dynamo start"
       stop program  =3D "/etc/init.d/dynamo stop"
       if failed port 8840 then alert</code></pre>

<p>Here is an example where we group together two database entries so you=
 can manage them together, e.g.; 'Monit -g database start all'. The mode st=
atement is also illustrated in the first entry and have the effect that Mon=
it will not try to (re)start this service if it is not running:</p>

<pre><code> check process sybase with pidfile /var/run/sybase.pid
       start =3D "/etc/init.d/sybase start"
       stop  =3D "/etc/init.d/sybase stop"
       mode passive
       group database

 check process oracle with pidfile /var/run/oracle.pid
       start program =3D "/etc/init.d/oracle start"
       stop program  =3D "/etc/init.d/oracle stop"
       if failed
          port 9001 protocol tns
       then restart
       group database</code></pre>

<p>This resource checks example will send an alert if CPU usage of the Apac=
he's HTTP daemon and its child processes goes beyond 60% for two cycles. Ap=
ache is restarted if the CPU usage is over 80% for five cycles or the memor=
y usage is over 100Mb for five cycles or if the machines load average is mo=
re than 10 for 8 cycles:</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start program =3D "/etc/init.d/httpd start"
       stop program  =3D "/etc/init.d/httpd stop"
       if cpu &gt; 40% for 2 cycles then alert
       if total cpu &gt; 60% for 2 cycles then alert
       if total cpu &gt; 80% for 5 cycles then restart
       if mem &gt; 100 MB for 5 cycles then stop
       if loadavg(5min) greater than 10.0 for 8 cycles then stop</code></pr=
e>

<p>This examples demonstrate the timestamp statement with exec and how you=
 may restart apache if its configuration file was changed.</p>

<pre><code> check file httpd.conf with path /etc/httpd/httpd.conf
       if changed timestamp
          then exec "/etc/init.d/httpd graceful"</code></pre>

<p>In this example we demonstrate usage of the extended alert statement and=
 a file check dependency:</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
      start =3D "/etc/init.d/httpd start"
      stop  =3D "/etc/init.d/httpd stop"
      alert admin@bar on {nonexist, timeout}
        with mail-format {
              from:     bofh@$HOST
              subject:  apache $EVENT - $ACTION
              message:  This event occurred on $HOST at $DATE.
              Your faithful employee,
              monit
      }
      if failed host www.tildeslash.com  port 80 then restart
      depend httpd_bin
      group apache

 check file httpd_bin with path /usr/local/apache/bin/httpd
       alert security@bar on {checksum, timestamp,
                  permission, uid, gid}
             with mail-format {subject: Alaaarrm! on $HOST}
       if failed checksum
          and expect 8f7f419955cefa0b33a2ba316cba3659
              then unmonitor
       if failed permission 755 then unmonitor
       if failed uid "root" then unmonitor
       if failed gid "root" then unmonitor
       if changed timestamp then alert
       group apache</code></pre>

<p>In this example, we demonstrate usage of the depend statement. In this=
 case, we want to start oracle and apache. However, we've set up apache to=
 use oracle as a back end, and if oracle is restarted, apache must be resta=
rted as well.</p>

<pre><code> check process apache with pidfile /var/run/httpd.pid
       start =3D "/etc/init.d/httpd start"
       stop  =3D "/etc/init.d/httpd stop"
       depends on oracle

 check process oracle with pidfile /var/run/oracle.pid
       start =3D "/etc/init.d/oracle start"
       stop  =3D "/etc/init.d/oracle stop"
       if failed port 9001 for 5 cycles then restart</code></pre>

<p>Next, we have 2 services, oracle-import and oracle-export that need to=
 be restarted if oracle is restarted, but are independent of each other.</p>

<pre><code> check process oracle with pidfile /var/run/oracle.pid
       start =3D "/etc/init.d/oracle start"
       stop  =3D "/etc/init.d/oracle stop"
       if failed port 9001 for 3 cycles then restart

 check process oracle-import
      with pidfile /var/run/oracle-import.pid
       start =3D "/etc/init.d/oracle-import start"
       stop  =3D "/etc/init.d/oracle-import stop"
       depends on oracle

 check process oracle-export
      with pidfile /var/run/oracle-export.pid
       start =3D "/etc/init.d/oracle-export start"
       stop  =3D "/etc/init.d/oracle-export stop"
       depends on oracle</code></pre>

<h1 id=3D"FILES">FILES</h1>

<p><i>~/.monitrc</i> Default run control file</p>

<p><i>/etc/monitrc</i> If the control file is not found in the default loca=
tion and /etc contains a <i>monitrc</i> file, this file will be used instea=
d.</p>

<p><i>./monitrc</i> If the control file is not found in either of the previ=
ous two locations, and the current working directory contains a <i>monitrc<=
/i> file, this file is used instead.</p>

<p><i>~/.monit.pid</i> Lock file to help prevent concurrent runs (non-root=
 mode).</p>

<p><i>/run/monit.pid</i> Lock file to help prevent concurrent runs (root mo=
de, Linux systems, if /run directory is available).</p>

<p><i>/var/run/monit.pid</i> Lock file to help prevent concurrent runs (roo=
t mode, Linux systems).</p>

<p><i>/etc/monit.pid</i> Lock file to help prevent concurrent runs (root mo=
de, systems without /var/run).</p>

<p><i>~/.monit.state</i> Monit saves its state to this file and utilises in=
formation found in this file to recover from a crash. This is a binary file=
 and its content is only of interest to monit. You may set the location of=
 this file in the Monit control file or by using the -s switch when Monit=
 is started.</p>

<p><i>~/.monit.id</i> Monit save its unique id to this file.</p>

<h1 id=3D"ENVIRONMENT">ENVIRONMENT</h1>

<p>No environment variables are used by Monit. However, when Monit executes=
 a start/stop/restart program or an exec action, it will set several enviro=
nment variables which can be utilised by the executable to get information=
 about the event, which triggered the action.</p>

<p>The following environment variable is set for every program executed by=
 monit, including <i>check program</i>:</p>

<dl>

<dt id=3D"MONIT_SERVICE">MONIT_SERVICE</dt>
<dd>

<p>The name of the service (from monitrc) for which the program is executed=
.</p>

</dd>
</dl>

<p>The following environment variables are only available in the service st=
art/stop/restart program and exec action context:</p>

<dl>

<dt id=3D"MONIT_EVENT">MONIT_EVENT</dt>
<dd>

<p>The event that occurred on the service</p>

</dd>
<dt id=3D"MONIT_DESCRIPTION">MONIT_DESCRIPTION</dt>
<dd>

<p>A description of the error condition</p>

</dd>
<dt id=3D"MONIT_DATE">MONIT_DATE</dt>
<dd>

<p>The time and date (RFC 822 style) the event occurred</p>

</dd>
<dt id=3D"MONIT_HOST">MONIT_HOST</dt>
<dd>

<p>The host the event occurred on</p>

</dd>
</dl>

<p>The following environment variables are only available in the <i>check=
 process</i> start/stop/restart program and exec action context:</p>

<dl>

<dt id=3D"MONIT_PROCESS_PID">MONIT_PROCESS_PID</dt>
<dd>

<p>The process pid. This may be 0 if the process was (re)started,</p>

</dd>
<dt id=3D"MONIT_PROCESS_MEMORY">MONIT_PROCESS_MEMORY</dt>
<dd>

<p>Process memory. This may be 0 if the process was (re)started,</p>

</dd>
<dt id=3D"MONIT_PROCESS_CHILDREN">MONIT_PROCESS_CHILDREN</dt>
<dd>

<p>Process children. This may be 0 if the process was (re)started,</p>

</dd>
<dt id=3D"MONIT_PROCESS_CPU_PERCENT">MONIT_PROCESS_CPU_PERCENT</dt>
<dd>

<p>Process cpu%. This may be 0 if the process was (re)started,</p>

</dd>
</dl>

<p>The following environment variables are only available for <i>check prog=
ram</i> start/stop/restart program and exec action context:</p>

<dl>

<dt id=3D"MONIT_PROGRAM_STATUS">MONIT_PROGRAM_STATUS</dt>
<dd>

<p>The program status (exit value).</p>

</dd>
</dl>

<h1 id=3D"SIGNALS">SIGNALS</h1>

<p>If a Monit daemon is running, SIGUSR1 wakes it up from its sleep phase=
 and forces a poll of all services. SIGTERM and SIGINT will gracefully term=
inate a Monit daemon. The SIGTERM signal is sent to a Monit daemon if Monit=
 is started with the <i>quit</i> action argument.</p>

<p>Sending a SIGHUP signal to a running Monit daemon will force the daemon=
 to reinitialise itself, specifically it will reread configuration, close=
 and reopen log files.</p>

<p>Running Monit in foreground while a background Monit daemon is running=
 will wake up the daemon.</p>

<h1 id=3D"NOTES">NOTES</h1>

<p>This is a very silent program. Use the -v switch if you want to see what=
 Monit is doing, and tail -f the log file. Optionally for testing purposes;=
 you can start Monit with the -Iv switch. Monit will then print debug infor=
mation to the console, to stop monit in this mode, simply press CTRL^C (i.e=
. SIGINT) in the same console.</p>

<p>The syntax (and parser) of the control file was inspired by Eric S. Raym=
ond et al.'s excellent fetchmail program. Some portions of this man page al=
so receive inspiration from the same authors.</p>

<h1 id=3D"COPYRIGHT">COPYRIGHT</h1>

<p>Copyright (C) 2001-2017 by Tildeslash Ltd. All Rights Reserved. This pro=
duct is distributed in the hope that it will be useful, but WITHOUT any war=
ranty; without even the implied warranty of MERCHANTABILITY or FITNESS for=
 a particular purpose.</p>

<h1 id=3D"SEE-ALSO">SEE ALSO</h1>

<p>GNU text utilities; md5sum(1); sha1sum(1); openssl(1); glob(7); regex(7)=
;</p>

<a href=3D"http://mmonit.com/monit/" class=3D"back">BACK TO MONIT</a>

<script type=3D"text/javascript" async=3D"" src=3D"urn:snapshot-40F63B23:ht=
tps://ssl.google-analytics.com/ga.js"></script><script type=3D"text/javascr=
ipt"><!--
/* Script removed by snapshot save */
--></script>






</body></html>
------=_NextPart_000_0000_C9F824A9.17EEC012
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: urn:snapshot-CA8B86AC:https://mmonit.com/monit/documentation/monit.css

/* Effective stylesheet produced by snapshot save */
a { color: rgb(52, 152, 219); text-decoration: none; }
a:hover { color: rgb(41, 128, 185); text-decoration: underline; }
body { background-color: rgb(255, 255, 255); margin: 20px 15%; font-family:=
 "Lucida Grande","Helvetica Neue",Helvetica,Arial,sans-serif; font-size: 18=
px; line-height: 1.72222; color: rgb(52, 73, 94); }
h1, h2, h3, h4 { font-weight: 700; color: rgb(52, 73, 94); }
h1 { font-size: 42px; }
h2 { font-size: 32px; }
h3 { font-size: 20px; }
pre, code { font-family: Monaco,Menlo,Consolas,"Courier New",monospace; col=
or: rgb(111, 124, 125); }
.back { display: block; text-align: center; font-size: 120%; margin: 40px=
 auto; }

------=_NextPart_000_0000_C9F824A9.17EEC012
Content-Type: text/javascript
Content-Transfer-Encoding: quoted-printable
Content-Location: urn:snapshot-40F63B23:https://ssl.google-analytics.com/ga.js

/* Script removed by snapshot save */

------=_NextPart_000_0000_C9F824A9.17EEC012--
